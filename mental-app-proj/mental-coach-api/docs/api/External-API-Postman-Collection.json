{
  "info": {
    "name": "Mental Coach External API",
    "description": "API Collection for third-party services integration / אוסף API לשירותים חיצוניים",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "api_key",
      "value": "mc_dev_your_api_key_here",
      "type": "string"
    }
  ],
  "auth": {
    "type": "apikey",
    "apikey": [
      {
        "key": "key",
        "value": "X-API-Key",
        "type": "string"
      },
      {
        "key": "value",
        "value": "{{api_key}}",
        "type": "string"
      },
      {
        "key": "in",
        "value": "header",
        "type": "string"
      }
    ]
  },
  "item": [
    {
      "name": "Health Check",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/api/external/health",
          "host": ["{{base_url}}"],
          "path": ["api", "external", "health"]
        },
        "description": "Check API connectivity and authentication / בדיקת קישוריות ואימות"
      },
      "response": [
        {
          "name": "Success",
          "status": "OK",
          "code": 200,
          "body": "{\n  \"status\": \"success\",\n  \"message\": \"External API is operational\",\n  \"timestamp\": \"2024-01-27T10:00:00.000Z\",\n  \"version\": \"1.0.0\"\n}"
        }
      ]
    },
    {
      "name": "Create User",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john@example.com\",\n  \"phone\": \"0501234567\",\n  \"password\": \"securePass123\",\n  \"age\": 25,\n  \"nickName\": \"JD\",\n  \"position\": \"RB\",\n  \"strongLeg\": \"right\",\n  \"team\": \"Maccabi Tel Aviv\",\n  \"league\": \"Liga Alef\",\n  \"subscriptionType\": \"premium\",\n  \"subscriptionExpiresAt\": \"2024-12-31\",\n  \"transactionId\": \"TXN123456\",\n  \"coachWhatsappNumber\": \"0521234567\",\n  \"allowedAuthMethods\": {\n    \"email\": false,\n    \"sms\": true,\n    \"google\": true\n  },\n  \"externalId\": \"EXT_USER_123\",\n  \"externalSource\": \"PartnerApp\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/api/external/users",
          "host": ["{{base_url}}"],
          "path": ["api", "external", "users"]
        },
        "description": "Create a new user account / יצירת חשבון משתמש חדש"
      },
      "response": [
        {
          "name": "Success",
          "status": "Created",
          "code": 201,
          "body": "{\n  \"status\": \"success\",\n  \"message\": \"User created successfully\",\n  \"data\": {\n    \"user\": {\n      \"_id\": \"65b5f4a2c3d4e5f6g7h8i9j0\",\n      \"uid\": \"firebase-uid-123\",\n      \"email\": \"john@example.com\",\n      \"firstName\": \"John\",\n      \"lastName\": \"Doe\",\n      \"phone\": \"0501234567\",\n      \"subscriptionType\": \"premium\",\n      \"subscriptionExpiresAt\": \"2024-12-31T00:00:00.000Z\",\n      \"externalId\": \"EXT_USER_123\",\n      \"createdAt\": \"2024-01-27T10:00:00.000Z\"\n    }\n  }\n}"
        },
        {
          "name": "User Exists",
          "status": "Conflict",
          "code": 409,
          "body": "{\n  \"status\": \"error\",\n  \"message\": \"User with this email already exists\"\n}"
        },
        {
          "name": "Invalid Data",
          "status": "Bad Request",
          "code": 400,
          "body": "{\n  \"status\": \"error\",\n  \"message\": \"Missing required fields: firstName, lastName, email\"\n}"
        }
      ]
    },
    {
      "name": "Bulk Create Users",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"users\": [\n    {\n      \"firstName\": \"Alice\",\n      \"lastName\": \"Smith\",\n      \"email\": \"alice@example.com\",\n      \"phone\": \"0502345678\",\n      \"externalId\": \"EXT_ALICE_123\"\n    },\n    {\n      \"firstName\": \"Bob\",\n      \"lastName\": \"Johnson\",\n      \"email\": \"bob@example.com\",\n      \"phone\": \"0503456789\",\n      \"externalId\": \"EXT_BOB_456\"\n    },\n    {\n      \"firstName\": \"Charlie\",\n      \"lastName\": \"Brown\",\n      \"email\": \"charlie@example.com\",\n      \"phone\": \"0504567890\",\n      \"externalId\": \"EXT_CHARLIE_789\"\n    }\n  ]\n}"
        },
        "url": {
          "raw": "{{base_url}}/api/external/users/bulk",
          "host": ["{{base_url}}"],
          "path": ["api", "external", "users", "bulk"]
        },
        "description": "Create multiple users in one request (max 100) / יצירת מספר משתמשים בבקשה אחת"
      },
      "response": [
        {
          "name": "Multi-Status",
          "status": "Multi-Status",
          "code": 207,
          "body": "{\n  \"status\": \"multi-status\",\n  \"message\": \"Processed 3 users\",\n  \"data\": {\n    \"total\": 3,\n    \"succeeded\": 2,\n    \"failed\": 1,\n    \"results\": {\n      \"success\": [\n        {\n          \"email\": \"alice@example.com\",\n          \"externalId\": \"EXT_ALICE_123\"\n        },\n        {\n          \"email\": \"bob@example.com\",\n          \"externalId\": \"EXT_BOB_456\"\n        }\n      ],\n      \"failed\": [\n        {\n          \"email\": \"charlie@example.com\",\n          \"externalId\": \"EXT_CHARLIE_789\",\n          \"error\": \"User with this email already exists\"\n        }\n      ]\n    }\n  }\n}"
        }
      ]
    },
    {
      "name": "Check User Exists",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/api/external/users/exists?email=john@example.com",
          "host": ["{{base_url}}"],
          "path": ["api", "external", "users", "exists"],
          "query": [
            {
              "key": "email",
              "value": "john@example.com",
              "description": "User's email address"
            },
            {
              "key": "externalId",
              "value": "EXT_USER_123",
              "description": "External system ID",
              "disabled": true
            }
          ]
        },
        "description": "Check if a user exists by email or external ID / בדיקה האם משתמש קיים"
      },
      "response": [
        {
          "name": "User Exists",
          "status": "OK",
          "code": 200,
          "body": "{\n  \"status\": \"success\",\n  \"data\": {\n    \"exists\": true,\n    \"user\": {\n      \"_id\": \"65b5f4a2c3d4e5f6g7h8i9j0\",\n      \"email\": \"john@example.com\",\n      \"externalId\": \"EXT_USER_123\"\n    }\n  }\n}"
        },
        {
          "name": "User Not Found",
          "status": "OK",
          "code": 200,
          "body": "{\n  \"status\": \"success\",\n  \"data\": {\n    \"exists\": false,\n    \"user\": null\n  }\n}"
        }
      ]
    },
    {
      "name": "Test Invalid API Key",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "X-API-Key",
            "value": "invalid_key_123",
            "description": "Invalid API key for testing"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/external/health",
          "host": ["{{base_url}}"],
          "path": ["api", "external", "health"]
        },
        "description": "Test authentication failure with invalid API key"
      },
      "response": [
        {
          "name": "Unauthorized",
          "status": "Unauthorized",
          "code": 401,
          "body": "{\n  \"status\": \"error\",\n  \"message\": \"Invalid API key\"\n}"
        }
      ]
    },
    {
      "name": "Test Rate Limiting",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/api/external/health",
          "host": ["{{base_url}}"],
          "path": ["api", "external", "health"]
        },
        "description": "Run this request 100+ times within a minute to test rate limiting"
      },
      "response": [
        {
          "name": "Rate Limited",
          "status": "Too Many Requests",
          "code": 429,
          "body": "{\n  \"status\": \"error\",\n  \"message\": \"Rate limit exceeded\"\n}",
          "header": [
            {
              "key": "X-RateLimit-Limit",
              "value": "100"
            },
            {
              "key": "X-RateLimit-Remaining",
              "value": "0"
            },
            {
              "key": "X-RateLimit-Reset",
              "value": "2024-01-27T10:01:00.000Z"
            }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Add timestamp to requests for logging",
          "pm.variables.set('timestamp', new Date().toISOString());",
          "",
          "// Log request details",
          "console.log(`[${pm.variables.get('timestamp')}] ${pm.request.method} ${pm.request.url}`);",
          "",
          "// Add client identifier if not present",
          "if (!pm.request.headers.has('X-Client-Id')) {",
          "    pm.request.headers.add({",
          "        key: 'X-Client-Id',",
          "        value: 'postman-test'",
          "    });",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Check for rate limit headers",
          "if (pm.response.headers.has('X-RateLimit-Remaining')) {",
          "    const remaining = pm.response.headers.get('X-RateLimit-Remaining');",
          "    console.log(`Rate limit remaining: ${remaining}`);",
          "    ",
          "    if (remaining < 10) {",
          "        console.warn('⚠️ Low rate limit remaining!');",
          "    }",
          "}",
          "",
          "// Test response time",
          "pm.test('Response time is less than 1000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(1000);",
          "});",
          "",
          "// Test for successful responses",
          "if (pm.response.code >= 200 && pm.response.code < 300) {",
          "    pm.test('Status code is successful', function () {",
          "        pm.response.to.have.status(pm.response.code);",
          "    });",
          "    ",
          "    pm.test('Response has valid JSON', function () {",
          "        pm.response.to.have.jsonBody();",
          "    });",
          "}"
        ]
      }
    }
  ]
}