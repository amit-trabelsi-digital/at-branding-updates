"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fetchGet = fetchGet;
exports.fetchGetWithinPage = fetchGetWithinPage;
exports.fetchGraphql = fetchGraphql;
exports.fetchPost = fetchPost;
exports.fetchPostWithinPage = fetchPostWithinPage;
require("core-js/modules/es.promise.js");
var _nodeFetch = _interopRequireDefault(require("node-fetch"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
const JSON_CONTENT_TYPE = 'application/json';
function getJsonHeaders() {
  return {
    'Accept': JSON_CONTENT_TYPE,
    'Content-Type': JSON_CONTENT_TYPE
  };
}
async function fetchGet(url, extraHeaders) {
  let headers = getJsonHeaders();
  if (extraHeaders) {
    headers = Object.assign(headers, extraHeaders);
  }
  const request = {
    method: 'GET',
    headers
  };
  const fetchResult = await (0, _nodeFetch.default)(url, request);
  if (fetchResult.status !== 200) {
    throw new Error(`sending a request to the institute server returned with status code ${fetchResult.status}`);
  }
  return fetchResult.json();
}
async function fetchPost(url, data, extraHeaders = {}) {
  const request = {
    method: 'POST',
    headers: _objectSpread(_objectSpread({}, getJsonHeaders()), extraHeaders),
    body: JSON.stringify(data)
  };
  const result = await (0, _nodeFetch.default)(url, request);
  return result.json();
}
async function fetchGraphql(url, query, variables = {}, extraHeaders = {}) {
  var _result$errors;
  const result = await fetchPost(url, {
    operationName: null,
    query,
    variables
  }, extraHeaders);
  if ((_result$errors = result.errors) !== null && _result$errors !== void 0 && _result$errors.length) {
    throw new Error(result.errors[0].message);
  }
  return result.data;
}
function fetchGetWithinPage(page, url) {
  return page.evaluate(innerUrl => {
    return new Promise((resolve, reject) => {
      fetch(innerUrl, {
        credentials: 'include'
      }).then(result => {
        if (result.status === 204) {
          resolve(null);
        } else {
          resolve(result.json());
        }
      }).catch(e => {
        reject(e);
      });
    });
  }, url);
}
function fetchPostWithinPage(page, url, data, extraHeaders = {}) {
  return page.evaluate((innerUrl, innerData, innerExtraHeaders) => {
    return new Promise((resolve, reject) => {
      fetch(innerUrl, {
        method: 'POST',
        body: JSON.stringify(innerData),
        credentials: 'include',
        // eslint-disable-next-line prefer-object-spread
        headers: Object.assign({
          'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
        }, innerExtraHeaders)
      }).then(result => {
        if (result.status === 204) {
          // No content response
          resolve(null);
        } else {
          resolve(result.json());
        }
      }).catch(e => {
        reject(e);
      });
    });
  }, url, data, extraHeaders);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,