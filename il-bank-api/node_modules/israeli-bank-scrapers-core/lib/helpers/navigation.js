"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCurrentUrl = getCurrentUrl;
exports.waitForNavigation = waitForNavigation;
exports.waitForNavigationAndDomLoad = waitForNavigationAndDomLoad;
exports.waitForRedirect = waitForRedirect;
exports.waitForUrl = waitForUrl;
require("core-js/modules/es.promise.js");
require("core-js/modules/es.regexp.constructor.js");
require("core-js/modules/es.regexp.exec.js");
var _waiting = require("./waiting");
async function waitForNavigation(pageOrFrame, options) {
  await pageOrFrame.waitForNavigation(options);
}
async function waitForNavigationAndDomLoad(page) {
  await waitForNavigation(page, {
    waitUntil: 'domcontentloaded'
  });
}
function getCurrentUrl(pageOrFrame, clientSide = false) {
  if (clientSide) {
    return pageOrFrame.evaluate(() => window.location.href);
  }
  return pageOrFrame.url();
}
async function waitForRedirect(pageOrFrame, timeout = 20000, clientSide = false, ignoreList = []) {
  const initial = await getCurrentUrl(pageOrFrame, clientSide);
  await (0, _waiting.waitUntil)(async () => {
    const current = await getCurrentUrl(pageOrFrame, clientSide);
    return current !== initial && !ignoreList.includes(current);
  }, `waiting for redirect from ${initial}`, timeout, 1000);
}
async function waitForUrl(pageOrFrame, url, timeout = 20000, clientSide = false) {
  await (0, _waiting.waitUntil)(async () => {
    const current = await getCurrentUrl(pageOrFrame, clientSide);
    return url instanceof RegExp ? url.test(current) : url === current;
  }, `waiting for url to be ${url}`, timeout, 1000);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfd2FpdGluZyIsInJlcXVpcmUiLCJ3YWl0Rm9yTmF2aWdhdGlvbiIsInBhZ2VPckZyYW1lIiwib3B0aW9ucyIsIndhaXRGb3JOYXZpZ2F0aW9uQW5kRG9tTG9hZCIsInBhZ2UiLCJ3YWl0VW50aWwiLCJnZXRDdXJyZW50VXJsIiwiY2xpZW50U2lkZSIsImV2YWx1YXRlIiwid2luZG93IiwibG9jYXRpb24iLCJocmVmIiwidXJsIiwid2FpdEZvclJlZGlyZWN0IiwidGltZW91dCIsImlnbm9yZUxpc3QiLCJpbml0aWFsIiwiY3VycmVudCIsImluY2x1ZGVzIiwid2FpdEZvclVybCIsIlJlZ0V4cCIsInRlc3QiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvaGVscGVycy9uYXZpZ2F0aW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIHR5cGUgRnJhbWUsXG4gIHR5cGUgUGFnZSwgdHlwZSBXYWl0Rm9yT3B0aW9ucyxcbn0gZnJvbSAncHVwcGV0ZWVyLWNvcmUnO1xuaW1wb3J0IHsgd2FpdFVudGlsIH0gZnJvbSAnLi93YWl0aW5nJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHdhaXRGb3JOYXZpZ2F0aW9uKHBhZ2VPckZyYW1lOiBQYWdlIHwgRnJhbWUsIG9wdGlvbnM/OiBXYWl0Rm9yT3B0aW9ucykge1xuICBhd2FpdCBwYWdlT3JGcmFtZS53YWl0Rm9yTmF2aWdhdGlvbihvcHRpb25zKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHdhaXRGb3JOYXZpZ2F0aW9uQW5kRG9tTG9hZChwYWdlOiBQYWdlKSB7XG4gIGF3YWl0IHdhaXRGb3JOYXZpZ2F0aW9uKHBhZ2UsIHsgd2FpdFVudGlsOiAnZG9tY29udGVudGxvYWRlZCcgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDdXJyZW50VXJsKHBhZ2VPckZyYW1lOiBQYWdlIHwgRnJhbWUsIGNsaWVudFNpZGUgPSBmYWxzZSkge1xuICBpZiAoY2xpZW50U2lkZSkge1xuICAgIHJldHVybiBwYWdlT3JGcmFtZS5ldmFsdWF0ZSgoKSA9PiB3aW5kb3cubG9jYXRpb24uaHJlZik7XG4gIH1cblxuICByZXR1cm4gcGFnZU9yRnJhbWUudXJsKCk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB3YWl0Rm9yUmVkaXJlY3QocGFnZU9yRnJhbWU6IFBhZ2UgfCBGcmFtZSwgdGltZW91dCA9IDIwMDAwLFxuICBjbGllbnRTaWRlID0gZmFsc2UsIGlnbm9yZUxpc3Q6IHN0cmluZ1tdID0gW10pIHtcbiAgY29uc3QgaW5pdGlhbCA9IGF3YWl0IGdldEN1cnJlbnRVcmwocGFnZU9yRnJhbWUsIGNsaWVudFNpZGUpO1xuXG4gIGF3YWl0IHdhaXRVbnRpbChhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgY3VycmVudCA9IGF3YWl0IGdldEN1cnJlbnRVcmwocGFnZU9yRnJhbWUsIGNsaWVudFNpZGUpO1xuICAgIHJldHVybiBjdXJyZW50ICE9PSBpbml0aWFsICYmICFpZ25vcmVMaXN0LmluY2x1ZGVzKGN1cnJlbnQpO1xuICB9LCBgd2FpdGluZyBmb3IgcmVkaXJlY3QgZnJvbSAke2luaXRpYWx9YCwgdGltZW91dCwgMTAwMCk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB3YWl0Rm9yVXJsKHBhZ2VPckZyYW1lOiBQYWdlIHwgRnJhbWUsIHVybDogc3RyaW5nIHwgUmVnRXhwLCB0aW1lb3V0ID0gMjAwMDAsIGNsaWVudFNpZGUgPSBmYWxzZSkge1xuICBhd2FpdCB3YWl0VW50aWwoYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGN1cnJlbnQgPSBhd2FpdCBnZXRDdXJyZW50VXJsKHBhZ2VPckZyYW1lLCBjbGllbnRTaWRlKTtcbiAgICByZXR1cm4gdXJsIGluc3RhbmNlb2YgUmVnRXhwID8gdXJsLnRlc3QoY3VycmVudCkgOiB1cmwgPT09IGN1cnJlbnQ7XG4gIH0sIGB3YWl0aW5nIGZvciB1cmwgdG8gYmUgJHt1cmx9YCwgdGltZW91dCwgMTAwMCk7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFJQSxJQUFBQSxRQUFBLEdBQUFDLE9BQUE7QUFFTyxlQUFlQyxpQkFBaUJBLENBQUNDLFdBQXlCLEVBQUVDLE9BQXdCLEVBQUU7RUFDM0YsTUFBTUQsV0FBVyxDQUFDRCxpQkFBaUIsQ0FBQ0UsT0FBTyxDQUFDO0FBQzlDO0FBRU8sZUFBZUMsMkJBQTJCQSxDQUFDQyxJQUFVLEVBQUU7RUFDNUQsTUFBTUosaUJBQWlCLENBQUNJLElBQUksRUFBRTtJQUFFQyxTQUFTLEVBQUU7RUFBbUIsQ0FBQyxDQUFDO0FBQ2xFO0FBRU8sU0FBU0MsYUFBYUEsQ0FBQ0wsV0FBeUIsRUFBRU0sVUFBVSxHQUFHLEtBQUssRUFBRTtFQUMzRSxJQUFJQSxVQUFVLEVBQUU7SUFDZCxPQUFPTixXQUFXLENBQUNPLFFBQVEsQ0FBQyxNQUFNQyxNQUFNLENBQUNDLFFBQVEsQ0FBQ0MsSUFBSSxDQUFDO0VBQ3pEO0VBRUEsT0FBT1YsV0FBVyxDQUFDVyxHQUFHLENBQUMsQ0FBQztBQUMxQjtBQUVPLGVBQWVDLGVBQWVBLENBQUNaLFdBQXlCLEVBQUVhLE9BQU8sR0FBRyxLQUFLLEVBQzlFUCxVQUFVLEdBQUcsS0FBSyxFQUFFUSxVQUFvQixHQUFHLEVBQUUsRUFBRTtFQUMvQyxNQUFNQyxPQUFPLEdBQUcsTUFBTVYsYUFBYSxDQUFDTCxXQUFXLEVBQUVNLFVBQVUsQ0FBQztFQUU1RCxNQUFNLElBQUFGLGtCQUFTLEVBQUMsWUFBWTtJQUMxQixNQUFNWSxPQUFPLEdBQUcsTUFBTVgsYUFBYSxDQUFDTCxXQUFXLEVBQUVNLFVBQVUsQ0FBQztJQUM1RCxPQUFPVSxPQUFPLEtBQUtELE9BQU8sSUFBSSxDQUFDRCxVQUFVLENBQUNHLFFBQVEsQ0FBQ0QsT0FBTyxDQUFDO0VBQzdELENBQUMsRUFBRSw2QkFBNkJELE9BQU8sRUFBRSxFQUFFRixPQUFPLEVBQUUsSUFBSSxDQUFDO0FBQzNEO0FBRU8sZUFBZUssVUFBVUEsQ0FBQ2xCLFdBQXlCLEVBQUVXLEdBQW9CLEVBQUVFLE9BQU8sR0FBRyxLQUFLLEVBQUVQLFVBQVUsR0FBRyxLQUFLLEVBQUU7RUFDckgsTUFBTSxJQUFBRixrQkFBUyxFQUFDLFlBQVk7SUFDMUIsTUFBTVksT0FBTyxHQUFHLE1BQU1YLGFBQWEsQ0FBQ0wsV0FBVyxFQUFFTSxVQUFVLENBQUM7SUFDNUQsT0FBT0ssR0FBRyxZQUFZUSxNQUFNLEdBQUdSLEdBQUcsQ0FBQ1MsSUFBSSxDQUFDSixPQUFPLENBQUMsR0FBR0wsR0FBRyxLQUFLSyxPQUFPO0VBQ3BFLENBQUMsRUFBRSx5QkFBeUJMLEdBQUcsRUFBRSxFQUFFRSxPQUFPLEVBQUUsSUFBSSxDQUFDO0FBQ25EIiwiaWdub3JlTGlzdCI6W119