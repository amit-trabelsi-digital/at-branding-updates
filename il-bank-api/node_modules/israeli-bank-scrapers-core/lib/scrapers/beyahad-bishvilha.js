"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("core-js/modules/es.symbol.description.js");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
require("core-js/modules/es.regexp.exec.js");
require("core-js/modules/es.string.replace.js");
var _moment = _interopRequireDefault(require("moment"));
var _constants = require("../constants");
var _debug = require("../helpers/debug");
var _elementsInteractions = require("../helpers/elements-interactions");
var _transactions = require("../helpers/transactions");
var _transactions2 = require("../transactions");
var _baseScraperWithBrowser = require("./base-scraper-with-browser");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const debug = (0, _debug.getDebug)('beyahadBishvilha');
const DATE_FORMAT = 'DD/MM/YY';
const LOGIN_URL = 'https://www.hist.org.il/login';
const SUCCESS_URL = 'https://www.hist.org.il/';
const CARD_URL = 'https://www.hist.org.il/card/balanceAndUses';
function getAmountData(amountStr) {
  const amountStrCln = amountStr.replace(',', '');
  let currency = null;
  let amount = null;
  if (amountStrCln.includes(_constants.SHEKEL_CURRENCY_SYMBOL)) {
    amount = parseFloat(amountStrCln.replace(_constants.SHEKEL_CURRENCY_SYMBOL, ''));
    currency = _constants.SHEKEL_CURRENCY;
  } else if (amountStrCln.includes(_constants.DOLLAR_CURRENCY_SYMBOL)) {
    amount = parseFloat(amountStrCln.replace(_constants.DOLLAR_CURRENCY_SYMBOL, ''));
    currency = _constants.DOLLAR_CURRENCY;
  } else if (amountStrCln.includes(_constants.EURO_CURRENCY_SYMBOL)) {
    amount = parseFloat(amountStrCln.replace(_constants.EURO_CURRENCY_SYMBOL, ''));
    currency = _constants.EURO_CURRENCY;
  } else {
    const parts = amountStrCln.split(' ');
    [currency] = parts;
    amount = parseFloat(parts[1]);
  }
  return {
    amount,
    currency
  };
}
function convertTransactions(txns) {
  debug(`convert ${txns.length} raw transactions to official Transaction structure`);
  return txns.map(txn => {
    const chargedAmountTuple = getAmountData(txn.chargedAmount || '');
    const txnProcessedDate = (0, _moment.default)(txn.date, DATE_FORMAT);
    const result = {
      type: _transactions2.TransactionTypes.Normal,
      status: _transactions2.TransactionStatuses.Completed,
      date: txnProcessedDate.toISOString(),
      processedDate: txnProcessedDate.toISOString(),
      originalAmount: chargedAmountTuple.amount,
      originalCurrency: chargedAmountTuple.currency,
      chargedAmount: chargedAmountTuple.amount,
      chargedCurrency: chargedAmountTuple.currency,
      description: txn.description || '',
      memo: '',
      identifier: txn.identifier
    };
    return result;
  });
}
async function fetchTransactions(page, options) {
  var _options$outputData$e, _options$outputData;
  await page.goto(CARD_URL);
  await (0, _elementsInteractions.waitUntilElementFound)(page, '.react-loading.hide', false);
  const defaultStartMoment = (0, _moment.default)().subtract(1, 'years');
  const startDate = options.startDate || defaultStartMoment.toDate();
  const startMoment = _moment.default.max(defaultStartMoment, (0, _moment.default)(startDate));
  const accountNumber = await (0, _elementsInteractions.pageEval)(page, '.wallet-details div:nth-of-type(2)', null, element => {
    return element.innerText.replace('מספר כרטיס ', '');
  });
  const balance = await (0, _elementsInteractions.pageEval)(page, '.wallet-details div:nth-of-type(4) > span:nth-of-type(2)', null, element => {
    return element.innerText;
  });
  debug('fetch raw transactions from page');
  const rawTransactions = await (0, _elementsInteractions.pageEvalAll)(page, '.transaction-container, .transaction-component-container', [], items => {
    return items.map(el => {
      const columns = el.querySelectorAll('.transaction-item > span');
      if (columns.length === 7) {
        return {
          date: columns[0].innerText,
          identifier: columns[1].innerText,
          description: columns[3].innerText,
          type: columns[5].innerText,
          chargedAmount: columns[6].innerText
        };
      }
      return null;
    });
  });
  debug(`fetched ${rawTransactions.length} raw transactions from page`);
  const accountTransactions = convertTransactions(rawTransactions.filter(item => !!item));
  debug('filer out old transactions');
  const txns = ((_options$outputData$e = (_options$outputData = options.outputData) === null || _options$outputData === void 0 ? void 0 : _options$outputData.enableTransactionsFilterByDate) !== null && _options$outputData$e !== void 0 ? _options$outputData$e : true) ? (0, _transactions.filterOldTransactions)(accountTransactions, startMoment, false) : accountTransactions;
  debug(`found ${txns.length} valid transactions out of ${accountTransactions.length} transactions for account ending with ${accountNumber.substring(accountNumber.length - 2)}`);
  return {
    accountNumber,
    balance: getAmountData(balance).amount,
    txns
  };
}
function getPossibleLoginResults() {
  const urls = {};
  urls[_baseScraperWithBrowser.LoginResults.Success] = [SUCCESS_URL];
  urls[_baseScraperWithBrowser.LoginResults.ChangePassword] = []; // TODO
  urls[_baseScraperWithBrowser.LoginResults.InvalidPassword] = []; // TODO
  urls[_baseScraperWithBrowser.LoginResults.UnknownError] = []; // TODO
  return urls;
}
function createLoginFields(credentials) {
  return [{
    selector: '#loginId',
    value: credentials.id
  }, {
    selector: '#loginPassword',
    value: credentials.password
  }];
}
class BeyahadBishvilhaScraper extends _baseScraperWithBrowser.BaseScraperWithBrowser {
  getViewPort() {
    return {
      width: 1500,
      height: 800
    };
  }
  getLoginOptions(credentials) {
    return {
      loginUrl: LOGIN_URL,
      fields: createLoginFields(credentials),
      submitButtonSelector: async () => {
        const button = await this.page.$('xpath//button[contains(., "התחבר")]');
        if (button) {
          await button.click();
        }
      },
      possibleResults: getPossibleLoginResults()
    };
  }
  async fetchData() {
    const account = await fetchTransactions(this.page, this.options);
    return {
      success: true,
      accounts: [account]
    };
  }
}
var _default = exports.default = BeyahadBishvilhaScraper;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbW9tZW50IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfY29uc3RhbnRzIiwiX2RlYnVnIiwiX2VsZW1lbnRzSW50ZXJhY3Rpb25zIiwiX3RyYW5zYWN0aW9ucyIsIl90cmFuc2FjdGlvbnMyIiwiX2Jhc2VTY3JhcGVyV2l0aEJyb3dzZXIiLCJlIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJkZWJ1ZyIsImdldERlYnVnIiwiREFURV9GT1JNQVQiLCJMT0dJTl9VUkwiLCJTVUNDRVNTX1VSTCIsIkNBUkRfVVJMIiwiZ2V0QW1vdW50RGF0YSIsImFtb3VudFN0ciIsImFtb3VudFN0ckNsbiIsInJlcGxhY2UiLCJjdXJyZW5jeSIsImFtb3VudCIsImluY2x1ZGVzIiwiU0hFS0VMX0NVUlJFTkNZX1NZTUJPTCIsInBhcnNlRmxvYXQiLCJTSEVLRUxfQ1VSUkVOQ1kiLCJET0xMQVJfQ1VSUkVOQ1lfU1lNQk9MIiwiRE9MTEFSX0NVUlJFTkNZIiwiRVVST19DVVJSRU5DWV9TWU1CT0wiLCJFVVJPX0NVUlJFTkNZIiwicGFydHMiLCJzcGxpdCIsImNvbnZlcnRUcmFuc2FjdGlvbnMiLCJ0eG5zIiwibGVuZ3RoIiwibWFwIiwidHhuIiwiY2hhcmdlZEFtb3VudFR1cGxlIiwiY2hhcmdlZEFtb3VudCIsInR4blByb2Nlc3NlZERhdGUiLCJtb21lbnQiLCJkYXRlIiwicmVzdWx0IiwidHlwZSIsIlRyYW5zYWN0aW9uVHlwZXMiLCJOb3JtYWwiLCJzdGF0dXMiLCJUcmFuc2FjdGlvblN0YXR1c2VzIiwiQ29tcGxldGVkIiwidG9JU09TdHJpbmciLCJwcm9jZXNzZWREYXRlIiwib3JpZ2luYWxBbW91bnQiLCJvcmlnaW5hbEN1cnJlbmN5IiwiY2hhcmdlZEN1cnJlbmN5IiwiZGVzY3JpcHRpb24iLCJtZW1vIiwiaWRlbnRpZmllciIsImZldGNoVHJhbnNhY3Rpb25zIiwicGFnZSIsIm9wdGlvbnMiLCJfb3B0aW9ucyRvdXRwdXREYXRhJGUiLCJfb3B0aW9ucyRvdXRwdXREYXRhIiwiZ290byIsIndhaXRVbnRpbEVsZW1lbnRGb3VuZCIsImRlZmF1bHRTdGFydE1vbWVudCIsInN1YnRyYWN0Iiwic3RhcnREYXRlIiwidG9EYXRlIiwic3RhcnRNb21lbnQiLCJtYXgiLCJhY2NvdW50TnVtYmVyIiwicGFnZUV2YWwiLCJlbGVtZW50IiwiaW5uZXJUZXh0IiwiYmFsYW5jZSIsInJhd1RyYW5zYWN0aW9ucyIsInBhZ2VFdmFsQWxsIiwiaXRlbXMiLCJlbCIsImNvbHVtbnMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiYWNjb3VudFRyYW5zYWN0aW9ucyIsImZpbHRlciIsIml0ZW0iLCJvdXRwdXREYXRhIiwiZW5hYmxlVHJhbnNhY3Rpb25zRmlsdGVyQnlEYXRlIiwiZmlsdGVyT2xkVHJhbnNhY3Rpb25zIiwic3Vic3RyaW5nIiwiZ2V0UG9zc2libGVMb2dpblJlc3VsdHMiLCJ1cmxzIiwiTG9naW5SZXN1bHRzIiwiU3VjY2VzcyIsIkNoYW5nZVBhc3N3b3JkIiwiSW52YWxpZFBhc3N3b3JkIiwiVW5rbm93bkVycm9yIiwiY3JlYXRlTG9naW5GaWVsZHMiLCJjcmVkZW50aWFscyIsInNlbGVjdG9yIiwidmFsdWUiLCJpZCIsInBhc3N3b3JkIiwiQmV5YWhhZEJpc2h2aWxoYVNjcmFwZXIiLCJCYXNlU2NyYXBlcldpdGhCcm93c2VyIiwiZ2V0Vmlld1BvcnQiLCJ3aWR0aCIsImhlaWdodCIsImdldExvZ2luT3B0aW9ucyIsImxvZ2luVXJsIiwiZmllbGRzIiwic3VibWl0QnV0dG9uU2VsZWN0b3IiLCJidXR0b24iLCIkIiwiY2xpY2siLCJwb3NzaWJsZVJlc3VsdHMiLCJmZXRjaERhdGEiLCJhY2NvdW50Iiwic3VjY2VzcyIsImFjY291bnRzIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NjcmFwZXJzL2JleWFoYWQtYmlzaHZpbGhhLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcbmltcG9ydCB7IHR5cGUgUGFnZSB9IGZyb20gJ3B1cHBldGVlci1jb3JlJztcbmltcG9ydCB7XG4gIERPTExBUl9DVVJSRU5DWSxcbiAgRE9MTEFSX0NVUlJFTkNZX1NZTUJPTCwgRVVST19DVVJSRU5DWSxcbiAgRVVST19DVVJSRU5DWV9TWU1CT0wsXG4gIFNIRUtFTF9DVVJSRU5DWSxcbiAgU0hFS0VMX0NVUlJFTkNZX1NZTUJPTCxcbn0gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCB7IGdldERlYnVnIH0gZnJvbSAnLi4vaGVscGVycy9kZWJ1Zyc7XG5pbXBvcnQgeyBwYWdlRXZhbCwgcGFnZUV2YWxBbGwsIHdhaXRVbnRpbEVsZW1lbnRGb3VuZCB9IGZyb20gJy4uL2hlbHBlcnMvZWxlbWVudHMtaW50ZXJhY3Rpb25zJztcbmltcG9ydCB7IGZpbHRlck9sZFRyYW5zYWN0aW9ucyB9IGZyb20gJy4uL2hlbHBlcnMvdHJhbnNhY3Rpb25zJztcbmltcG9ydCB7IFRyYW5zYWN0aW9uU3RhdHVzZXMsIFRyYW5zYWN0aW9uVHlwZXMsIHR5cGUgVHJhbnNhY3Rpb24gfSBmcm9tICcuLi90cmFuc2FjdGlvbnMnO1xuaW1wb3J0IHsgQmFzZVNjcmFwZXJXaXRoQnJvd3NlciwgTG9naW5SZXN1bHRzLCB0eXBlIFBvc3NpYmxlTG9naW5SZXN1bHRzIH0gZnJvbSAnLi9iYXNlLXNjcmFwZXItd2l0aC1icm93c2VyJztcbmltcG9ydCB7IHR5cGUgU2NyYXBlck9wdGlvbnMgfSBmcm9tICcuL2ludGVyZmFjZSc7XG5cbmNvbnN0IGRlYnVnID0gZ2V0RGVidWcoJ2JleWFoYWRCaXNodmlsaGEnKTtcblxuY29uc3QgREFURV9GT1JNQVQgPSAnREQvTU0vWVknO1xuY29uc3QgTE9HSU5fVVJMID0gJ2h0dHBzOi8vd3d3Lmhpc3Qub3JnLmlsL2xvZ2luJztcbmNvbnN0IFNVQ0NFU1NfVVJMID0gJ2h0dHBzOi8vd3d3Lmhpc3Qub3JnLmlsLyc7XG5jb25zdCBDQVJEX1VSTCA9ICdodHRwczovL3d3dy5oaXN0Lm9yZy5pbC9jYXJkL2JhbGFuY2VBbmRVc2VzJztcblxuaW50ZXJmYWNlIFNjcmFwZWRUcmFuc2FjdGlvbiB7XG4gIGRhdGU6IHN0cmluZztcbiAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgdHlwZTogc3RyaW5nO1xuICBjaGFyZ2VkQW1vdW50OiBzdHJpbmc7XG4gIGlkZW50aWZpZXI6IHN0cmluZztcbn1cblxuZnVuY3Rpb24gZ2V0QW1vdW50RGF0YShhbW91bnRTdHI6IHN0cmluZykge1xuICBjb25zdCBhbW91bnRTdHJDbG4gPSBhbW91bnRTdHIucmVwbGFjZSgnLCcsICcnKTtcbiAgbGV0IGN1cnJlbmN5OiBzdHJpbmcgfCBudWxsID0gbnVsbDtcbiAgbGV0IGFtb3VudDogbnVtYmVyIHwgbnVsbCA9IG51bGw7XG4gIGlmIChhbW91bnRTdHJDbG4uaW5jbHVkZXMoU0hFS0VMX0NVUlJFTkNZX1NZTUJPTCkpIHtcbiAgICBhbW91bnQgPSBwYXJzZUZsb2F0KGFtb3VudFN0ckNsbi5yZXBsYWNlKFNIRUtFTF9DVVJSRU5DWV9TWU1CT0wsICcnKSk7XG4gICAgY3VycmVuY3kgPSBTSEVLRUxfQ1VSUkVOQ1k7XG4gIH0gZWxzZSBpZiAoYW1vdW50U3RyQ2xuLmluY2x1ZGVzKERPTExBUl9DVVJSRU5DWV9TWU1CT0wpKSB7XG4gICAgYW1vdW50ID0gcGFyc2VGbG9hdChhbW91bnRTdHJDbG4ucmVwbGFjZShET0xMQVJfQ1VSUkVOQ1lfU1lNQk9MLCAnJykpO1xuICAgIGN1cnJlbmN5ID0gRE9MTEFSX0NVUlJFTkNZO1xuICB9IGVsc2UgaWYgKGFtb3VudFN0ckNsbi5pbmNsdWRlcyhFVVJPX0NVUlJFTkNZX1NZTUJPTCkpIHtcbiAgICBhbW91bnQgPSBwYXJzZUZsb2F0KGFtb3VudFN0ckNsbi5yZXBsYWNlKEVVUk9fQ1VSUkVOQ1lfU1lNQk9MLCAnJykpO1xuICAgIGN1cnJlbmN5ID0gRVVST19DVVJSRU5DWTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBwYXJ0cyA9IGFtb3VudFN0ckNsbi5zcGxpdCgnICcpO1xuICAgIFtjdXJyZW5jeV0gPSBwYXJ0cztcbiAgICBhbW91bnQgPSBwYXJzZUZsb2F0KHBhcnRzWzFdKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgYW1vdW50LFxuICAgIGN1cnJlbmN5LFxuICB9O1xufVxuXG5mdW5jdGlvbiBjb252ZXJ0VHJhbnNhY3Rpb25zKHR4bnM6IFNjcmFwZWRUcmFuc2FjdGlvbltdKTogVHJhbnNhY3Rpb25bXSB7XG4gIGRlYnVnKGBjb252ZXJ0ICR7dHhucy5sZW5ndGh9IHJhdyB0cmFuc2FjdGlvbnMgdG8gb2ZmaWNpYWwgVHJhbnNhY3Rpb24gc3RydWN0dXJlYCk7XG4gIHJldHVybiB0eG5zLm1hcCgodHhuKSA9PiB7XG4gICAgY29uc3QgY2hhcmdlZEFtb3VudFR1cGxlID0gZ2V0QW1vdW50RGF0YSh0eG4uY2hhcmdlZEFtb3VudCB8fCAnJyk7XG4gICAgY29uc3QgdHhuUHJvY2Vzc2VkRGF0ZSA9IG1vbWVudCh0eG4uZGF0ZSwgREFURV9GT1JNQVQpO1xuXG4gICAgY29uc3QgcmVzdWx0OiBUcmFuc2FjdGlvbiA9IHtcbiAgICAgIHR5cGU6IFRyYW5zYWN0aW9uVHlwZXMuTm9ybWFsLFxuICAgICAgc3RhdHVzOiBUcmFuc2FjdGlvblN0YXR1c2VzLkNvbXBsZXRlZCxcbiAgICAgIGRhdGU6IHR4blByb2Nlc3NlZERhdGUudG9JU09TdHJpbmcoKSxcbiAgICAgIHByb2Nlc3NlZERhdGU6IHR4blByb2Nlc3NlZERhdGUudG9JU09TdHJpbmcoKSxcbiAgICAgIG9yaWdpbmFsQW1vdW50OiBjaGFyZ2VkQW1vdW50VHVwbGUuYW1vdW50LFxuICAgICAgb3JpZ2luYWxDdXJyZW5jeTogY2hhcmdlZEFtb3VudFR1cGxlLmN1cnJlbmN5LFxuICAgICAgY2hhcmdlZEFtb3VudDogY2hhcmdlZEFtb3VudFR1cGxlLmFtb3VudCxcbiAgICAgIGNoYXJnZWRDdXJyZW5jeTogY2hhcmdlZEFtb3VudFR1cGxlLmN1cnJlbmN5LFxuICAgICAgZGVzY3JpcHRpb246IHR4bi5kZXNjcmlwdGlvbiB8fCAnJyxcbiAgICAgIG1lbW86ICcnLFxuICAgICAgaWRlbnRpZmllcjogdHhuLmlkZW50aWZpZXIsXG4gICAgfTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0pO1xufVxuXG5hc3luYyBmdW5jdGlvbiBmZXRjaFRyYW5zYWN0aW9ucyhwYWdlOiBQYWdlLCBvcHRpb25zOiBTY3JhcGVyT3B0aW9ucykge1xuICBhd2FpdCBwYWdlLmdvdG8oQ0FSRF9VUkwpO1xuICBhd2FpdCB3YWl0VW50aWxFbGVtZW50Rm91bmQocGFnZSwgJy5yZWFjdC1sb2FkaW5nLmhpZGUnLCBmYWxzZSk7XG4gIGNvbnN0IGRlZmF1bHRTdGFydE1vbWVudCA9IG1vbWVudCgpLnN1YnRyYWN0KDEsICd5ZWFycycpO1xuICBjb25zdCBzdGFydERhdGUgPSBvcHRpb25zLnN0YXJ0RGF0ZSB8fCBkZWZhdWx0U3RhcnRNb21lbnQudG9EYXRlKCk7XG4gIGNvbnN0IHN0YXJ0TW9tZW50ID0gbW9tZW50Lm1heChkZWZhdWx0U3RhcnRNb21lbnQsIG1vbWVudChzdGFydERhdGUpKTtcblxuICBjb25zdCBhY2NvdW50TnVtYmVyID0gYXdhaXQgcGFnZUV2YWwocGFnZSwgJy53YWxsZXQtZGV0YWlscyBkaXY6bnRoLW9mLXR5cGUoMiknLCBudWxsLCAoZWxlbWVudCkgPT4ge1xuICAgIHJldHVybiAoZWxlbWVudCBhcyBhbnkpLmlubmVyVGV4dC5yZXBsYWNlKCfXnteh16TXqCDXm9eo15jXmdehICcsICcnKTtcbiAgfSk7XG5cbiAgY29uc3QgYmFsYW5jZSA9IGF3YWl0IHBhZ2VFdmFsKHBhZ2UsICcud2FsbGV0LWRldGFpbHMgZGl2Om50aC1vZi10eXBlKDQpID4gc3BhbjpudGgtb2YtdHlwZSgyKScsIG51bGwsIChlbGVtZW50KSA9PiB7XG4gICAgcmV0dXJuIChlbGVtZW50IGFzIGFueSkuaW5uZXJUZXh0O1xuICB9KTtcblxuICBkZWJ1ZygnZmV0Y2ggcmF3IHRyYW5zYWN0aW9ucyBmcm9tIHBhZ2UnKTtcblxuICBjb25zdCByYXdUcmFuc2FjdGlvbnM6IChTY3JhcGVkVHJhbnNhY3Rpb24gfCBudWxsKVtdID0gYXdhaXQgcGFnZUV2YWxBbGw8KFNjcmFwZWRUcmFuc2FjdGlvbiB8IG51bGwpW10+KHBhZ2UsICcudHJhbnNhY3Rpb24tY29udGFpbmVyLCAudHJhbnNhY3Rpb24tY29tcG9uZW50LWNvbnRhaW5lcicsIFtdLCAoaXRlbXMpID0+IHtcbiAgICByZXR1cm4gKGl0ZW1zKS5tYXAoKGVsKSA9PiB7XG4gICAgICBjb25zdCBjb2x1bW5zOiBOb2RlTGlzdE9mPEhUTUxTcGFuRWxlbWVudD4gPSBlbC5xdWVyeVNlbGVjdG9yQWxsKCcudHJhbnNhY3Rpb24taXRlbSA+IHNwYW4nKTtcbiAgICAgIGlmIChjb2x1bW5zLmxlbmd0aCA9PT0gNykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRhdGU6IGNvbHVtbnNbMF0uaW5uZXJUZXh0LFxuICAgICAgICAgIGlkZW50aWZpZXI6IGNvbHVtbnNbMV0uaW5uZXJUZXh0LFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBjb2x1bW5zWzNdLmlubmVyVGV4dCxcbiAgICAgICAgICB0eXBlOiBjb2x1bW5zWzVdLmlubmVyVGV4dCxcbiAgICAgICAgICBjaGFyZ2VkQW1vdW50OiBjb2x1bW5zWzZdLmlubmVyVGV4dCxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0pO1xuICB9KTtcbiAgZGVidWcoYGZldGNoZWQgJHtyYXdUcmFuc2FjdGlvbnMubGVuZ3RofSByYXcgdHJhbnNhY3Rpb25zIGZyb20gcGFnZWApO1xuXG4gIGNvbnN0IGFjY291bnRUcmFuc2FjdGlvbnMgPSBjb252ZXJ0VHJhbnNhY3Rpb25zKHJhd1RyYW5zYWN0aW9ucy5maWx0ZXIoKGl0ZW0pID0+ICEhaXRlbSkgYXMgU2NyYXBlZFRyYW5zYWN0aW9uW10pO1xuXG4gIGRlYnVnKCdmaWxlciBvdXQgb2xkIHRyYW5zYWN0aW9ucycpO1xuICBjb25zdCB0eG5zID0gKG9wdGlvbnMub3V0cHV0RGF0YT8uZW5hYmxlVHJhbnNhY3Rpb25zRmlsdGVyQnlEYXRlID8/IHRydWUpID9cbiAgICBmaWx0ZXJPbGRUcmFuc2FjdGlvbnMoYWNjb3VudFRyYW5zYWN0aW9ucywgc3RhcnRNb21lbnQsIGZhbHNlKSA6XG4gICAgYWNjb3VudFRyYW5zYWN0aW9ucztcbiAgZGVidWcoYGZvdW5kICR7dHhucy5sZW5ndGh9IHZhbGlkIHRyYW5zYWN0aW9ucyBvdXQgb2YgJHthY2NvdW50VHJhbnNhY3Rpb25zLmxlbmd0aH0gdHJhbnNhY3Rpb25zIGZvciBhY2NvdW50IGVuZGluZyB3aXRoICR7YWNjb3VudE51bWJlci5zdWJzdHJpbmcoYWNjb3VudE51bWJlci5sZW5ndGggLSAyKX1gKTtcblxuICByZXR1cm4ge1xuICAgIGFjY291bnROdW1iZXIsXG4gICAgYmFsYW5jZTogZ2V0QW1vdW50RGF0YShiYWxhbmNlKS5hbW91bnQsXG4gICAgdHhucyxcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0UG9zc2libGVMb2dpblJlc3VsdHMoKTogUG9zc2libGVMb2dpblJlc3VsdHMge1xuICBjb25zdCB1cmxzOiBQb3NzaWJsZUxvZ2luUmVzdWx0cyA9IHt9O1xuICB1cmxzW0xvZ2luUmVzdWx0cy5TdWNjZXNzXSA9IFtTVUNDRVNTX1VSTF07XG4gIHVybHNbTG9naW5SZXN1bHRzLkNoYW5nZVBhc3N3b3JkXSA9IFtdOyAvLyBUT0RPXG4gIHVybHNbTG9naW5SZXN1bHRzLkludmFsaWRQYXNzd29yZF0gPSBbXTsgLy8gVE9ET1xuICB1cmxzW0xvZ2luUmVzdWx0cy5Vbmtub3duRXJyb3JdID0gW107IC8vIFRPRE9cbiAgcmV0dXJuIHVybHM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxvZ2luRmllbGRzKGNyZWRlbnRpYWxzOiBTY3JhcGVyU3BlY2lmaWNDcmVkZW50aWFscykge1xuICByZXR1cm4gW1xuICAgIHsgc2VsZWN0b3I6ICcjbG9naW5JZCcsIHZhbHVlOiBjcmVkZW50aWFscy5pZCB9LFxuICAgIHsgc2VsZWN0b3I6ICcjbG9naW5QYXNzd29yZCcsIHZhbHVlOiBjcmVkZW50aWFscy5wYXNzd29yZCB9LFxuICBdO1xufVxuXG50eXBlIFNjcmFwZXJTcGVjaWZpY0NyZWRlbnRpYWxzID0geyBpZDogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nIH07XG5cbmNsYXNzIEJleWFoYWRCaXNodmlsaGFTY3JhcGVyIGV4dGVuZHMgQmFzZVNjcmFwZXJXaXRoQnJvd3NlcjxTY3JhcGVyU3BlY2lmaWNDcmVkZW50aWFscz4ge1xuICBwcm90ZWN0ZWQgZ2V0Vmlld1BvcnQoKTogeyB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciB9IHtcbiAgICByZXR1cm4ge1xuICAgICAgd2lkdGg6IDE1MDAsXG4gICAgICBoZWlnaHQ6IDgwMCxcbiAgICB9O1xuICB9XG5cbiAgZ2V0TG9naW5PcHRpb25zKGNyZWRlbnRpYWxzOiBTY3JhcGVyU3BlY2lmaWNDcmVkZW50aWFscykge1xuICAgIHJldHVybiB7XG4gICAgICBsb2dpblVybDogTE9HSU5fVVJMLFxuICAgICAgZmllbGRzOiBjcmVhdGVMb2dpbkZpZWxkcyhjcmVkZW50aWFscyksXG4gICAgICBzdWJtaXRCdXR0b25TZWxlY3RvcjogYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBidXR0b24gPSBhd2FpdCB0aGlzLnBhZ2UuJCgneHBhdGgvL2J1dHRvbltjb250YWlucyguLCBcIteU16rXl9eR16hcIildJyk7XG4gICAgICAgIGlmIChidXR0b24pIHtcbiAgICAgICAgICBhd2FpdCBidXR0b24uY2xpY2soKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHBvc3NpYmxlUmVzdWx0czogZ2V0UG9zc2libGVMb2dpblJlc3VsdHMoKSxcbiAgICB9O1xuICB9XG5cbiAgYXN5bmMgZmV0Y2hEYXRhKCkge1xuICAgIGNvbnN0IGFjY291bnQgPSBhd2FpdCBmZXRjaFRyYW5zYWN0aW9ucyh0aGlzLnBhZ2UsIHRoaXMub3B0aW9ucyk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBhY2NvdW50czogW2FjY291bnRdLFxuICAgIH07XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQmV5YWhhZEJpc2h2aWxoYVNjcmFwZXI7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUEsSUFBQUEsT0FBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBQUMsVUFBQSxHQUFBRCxPQUFBO0FBT0EsSUFBQUUsTUFBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcscUJBQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLGFBQUEsR0FBQUosT0FBQTtBQUNBLElBQUFLLGNBQUEsR0FBQUwsT0FBQTtBQUNBLElBQUFNLHVCQUFBLEdBQUFOLE9BQUE7QUFBOEcsU0FBQUQsdUJBQUFRLENBQUEsV0FBQUEsQ0FBQSxJQUFBQSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQSxLQUFBRSxPQUFBLEVBQUFGLENBQUE7QUFHOUcsTUFBTUcsS0FBSyxHQUFHLElBQUFDLGVBQVEsRUFBQyxrQkFBa0IsQ0FBQztBQUUxQyxNQUFNQyxXQUFXLEdBQUcsVUFBVTtBQUM5QixNQUFNQyxTQUFTLEdBQUcsK0JBQStCO0FBQ2pELE1BQU1DLFdBQVcsR0FBRywwQkFBMEI7QUFDOUMsTUFBTUMsUUFBUSxHQUFHLDZDQUE2QztBQVU5RCxTQUFTQyxhQUFhQSxDQUFDQyxTQUFpQixFQUFFO0VBQ3hDLE1BQU1DLFlBQVksR0FBR0QsU0FBUyxDQUFDRSxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQztFQUMvQyxJQUFJQyxRQUF1QixHQUFHLElBQUk7RUFDbEMsSUFBSUMsTUFBcUIsR0FBRyxJQUFJO0VBQ2hDLElBQUlILFlBQVksQ0FBQ0ksUUFBUSxDQUFDQyxpQ0FBc0IsQ0FBQyxFQUFFO0lBQ2pERixNQUFNLEdBQUdHLFVBQVUsQ0FBQ04sWUFBWSxDQUFDQyxPQUFPLENBQUNJLGlDQUFzQixFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3JFSCxRQUFRLEdBQUdLLDBCQUFlO0VBQzVCLENBQUMsTUFBTSxJQUFJUCxZQUFZLENBQUNJLFFBQVEsQ0FBQ0ksaUNBQXNCLENBQUMsRUFBRTtJQUN4REwsTUFBTSxHQUFHRyxVQUFVLENBQUNOLFlBQVksQ0FBQ0MsT0FBTyxDQUFDTyxpQ0FBc0IsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNyRU4sUUFBUSxHQUFHTywwQkFBZTtFQUM1QixDQUFDLE1BQU0sSUFBSVQsWUFBWSxDQUFDSSxRQUFRLENBQUNNLCtCQUFvQixDQUFDLEVBQUU7SUFDdERQLE1BQU0sR0FBR0csVUFBVSxDQUFDTixZQUFZLENBQUNDLE9BQU8sQ0FBQ1MsK0JBQW9CLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDbkVSLFFBQVEsR0FBR1Msd0JBQWE7RUFDMUIsQ0FBQyxNQUFNO0lBQ0wsTUFBTUMsS0FBSyxHQUFHWixZQUFZLENBQUNhLEtBQUssQ0FBQyxHQUFHLENBQUM7SUFDckMsQ0FBQ1gsUUFBUSxDQUFDLEdBQUdVLEtBQUs7SUFDbEJULE1BQU0sR0FBR0csVUFBVSxDQUFDTSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDL0I7RUFFQSxPQUFPO0lBQ0xULE1BQU07SUFDTkQ7RUFDRixDQUFDO0FBQ0g7QUFFQSxTQUFTWSxtQkFBbUJBLENBQUNDLElBQTBCLEVBQWlCO0VBQ3RFdkIsS0FBSyxDQUFDLFdBQVd1QixJQUFJLENBQUNDLE1BQU0scURBQXFELENBQUM7RUFDbEYsT0FBT0QsSUFBSSxDQUFDRSxHQUFHLENBQUVDLEdBQUcsSUFBSztJQUN2QixNQUFNQyxrQkFBa0IsR0FBR3JCLGFBQWEsQ0FBQ29CLEdBQUcsQ0FBQ0UsYUFBYSxJQUFJLEVBQUUsQ0FBQztJQUNqRSxNQUFNQyxnQkFBZ0IsR0FBRyxJQUFBQyxlQUFNLEVBQUNKLEdBQUcsQ0FBQ0ssSUFBSSxFQUFFN0IsV0FBVyxDQUFDO0lBRXRELE1BQU04QixNQUFtQixHQUFHO01BQzFCQyxJQUFJLEVBQUVDLCtCQUFnQixDQUFDQyxNQUFNO01BQzdCQyxNQUFNLEVBQUVDLGtDQUFtQixDQUFDQyxTQUFTO01BQ3JDUCxJQUFJLEVBQUVGLGdCQUFnQixDQUFDVSxXQUFXLENBQUMsQ0FBQztNQUNwQ0MsYUFBYSxFQUFFWCxnQkFBZ0IsQ0FBQ1UsV0FBVyxDQUFDLENBQUM7TUFDN0NFLGNBQWMsRUFBRWQsa0JBQWtCLENBQUNoQixNQUFNO01BQ3pDK0IsZ0JBQWdCLEVBQUVmLGtCQUFrQixDQUFDakIsUUFBUTtNQUM3Q2tCLGFBQWEsRUFBRUQsa0JBQWtCLENBQUNoQixNQUFNO01BQ3hDZ0MsZUFBZSxFQUFFaEIsa0JBQWtCLENBQUNqQixRQUFRO01BQzVDa0MsV0FBVyxFQUFFbEIsR0FBRyxDQUFDa0IsV0FBVyxJQUFJLEVBQUU7TUFDbENDLElBQUksRUFBRSxFQUFFO01BQ1JDLFVBQVUsRUFBRXBCLEdBQUcsQ0FBQ29CO0lBQ2xCLENBQUM7SUFFRCxPQUFPZCxNQUFNO0VBQ2YsQ0FBQyxDQUFDO0FBQ0o7QUFFQSxlQUFlZSxpQkFBaUJBLENBQUNDLElBQVUsRUFBRUMsT0FBdUIsRUFBRTtFQUFBLElBQUFDLHFCQUFBLEVBQUFDLG1CQUFBO0VBQ3BFLE1BQU1ILElBQUksQ0FBQ0ksSUFBSSxDQUFDL0MsUUFBUSxDQUFDO0VBQ3pCLE1BQU0sSUFBQWdELDJDQUFxQixFQUFDTCxJQUFJLEVBQUUscUJBQXFCLEVBQUUsS0FBSyxDQUFDO0VBQy9ELE1BQU1NLGtCQUFrQixHQUFHLElBQUF4QixlQUFNLEVBQUMsQ0FBQyxDQUFDeUIsUUFBUSxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUM7RUFDeEQsTUFBTUMsU0FBUyxHQUFHUCxPQUFPLENBQUNPLFNBQVMsSUFBSUYsa0JBQWtCLENBQUNHLE1BQU0sQ0FBQyxDQUFDO0VBQ2xFLE1BQU1DLFdBQVcsR0FBRzVCLGVBQU0sQ0FBQzZCLEdBQUcsQ0FBQ0wsa0JBQWtCLEVBQUUsSUFBQXhCLGVBQU0sRUFBQzBCLFNBQVMsQ0FBQyxDQUFDO0VBRXJFLE1BQU1JLGFBQWEsR0FBRyxNQUFNLElBQUFDLDhCQUFRLEVBQUNiLElBQUksRUFBRSxvQ0FBb0MsRUFBRSxJQUFJLEVBQUdjLE9BQU8sSUFBSztJQUNsRyxPQUFRQSxPQUFPLENBQVNDLFNBQVMsQ0FBQ3RELE9BQU8sQ0FBQyxhQUFhLEVBQUUsRUFBRSxDQUFDO0VBQzlELENBQUMsQ0FBQztFQUVGLE1BQU11RCxPQUFPLEdBQUcsTUFBTSxJQUFBSCw4QkFBUSxFQUFDYixJQUFJLEVBQUUsMERBQTBELEVBQUUsSUFBSSxFQUFHYyxPQUFPLElBQUs7SUFDbEgsT0FBUUEsT0FBTyxDQUFTQyxTQUFTO0VBQ25DLENBQUMsQ0FBQztFQUVGL0QsS0FBSyxDQUFDLGtDQUFrQyxDQUFDO0VBRXpDLE1BQU1pRSxlQUE4QyxHQUFHLE1BQU0sSUFBQUMsaUNBQVcsRUFBZ0NsQixJQUFJLEVBQUUsMERBQTBELEVBQUUsRUFBRSxFQUFHbUIsS0FBSyxJQUFLO0lBQ3ZMLE9BQVFBLEtBQUssQ0FBRTFDLEdBQUcsQ0FBRTJDLEVBQUUsSUFBSztNQUN6QixNQUFNQyxPQUFvQyxHQUFHRCxFQUFFLENBQUNFLGdCQUFnQixDQUFDLDBCQUEwQixDQUFDO01BQzVGLElBQUlELE9BQU8sQ0FBQzdDLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDeEIsT0FBTztVQUNMTyxJQUFJLEVBQUVzQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUNOLFNBQVM7VUFDMUJqQixVQUFVLEVBQUV1QixPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUNOLFNBQVM7VUFDaENuQixXQUFXLEVBQUV5QixPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUNOLFNBQVM7VUFDakM5QixJQUFJLEVBQUVvQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUNOLFNBQVM7VUFDMUJuQyxhQUFhLEVBQUV5QyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUNOO1FBQzVCLENBQUM7TUFDSDtNQUNBLE9BQU8sSUFBSTtJQUNiLENBQUMsQ0FBQztFQUNKLENBQUMsQ0FBQztFQUNGL0QsS0FBSyxDQUFDLFdBQVdpRSxlQUFlLENBQUN6QyxNQUFNLDZCQUE2QixDQUFDO0VBRXJFLE1BQU0rQyxtQkFBbUIsR0FBR2pELG1CQUFtQixDQUFDMkMsZUFBZSxDQUFDTyxNQUFNLENBQUVDLElBQUksSUFBSyxDQUFDLENBQUNBLElBQUksQ0FBeUIsQ0FBQztFQUVqSHpFLEtBQUssQ0FBQyw0QkFBNEIsQ0FBQztFQUNuQyxNQUFNdUIsSUFBSSxHQUFHLEVBQUEyQixxQkFBQSxJQUFBQyxtQkFBQSxHQUFDRixPQUFPLENBQUN5QixVQUFVLGNBQUF2QixtQkFBQSx1QkFBbEJBLG1CQUFBLENBQW9Cd0IsOEJBQThCLGNBQUF6QixxQkFBQSxjQUFBQSxxQkFBQSxHQUFJLElBQUksSUFDdEUsSUFBQTBCLG1DQUFxQixFQUFDTCxtQkFBbUIsRUFBRWIsV0FBVyxFQUFFLEtBQUssQ0FBQyxHQUM5RGEsbUJBQW1CO0VBQ3JCdkUsS0FBSyxDQUFDLFNBQVN1QixJQUFJLENBQUNDLE1BQU0sOEJBQThCK0MsbUJBQW1CLENBQUMvQyxNQUFNLHlDQUF5Q29DLGFBQWEsQ0FBQ2lCLFNBQVMsQ0FBQ2pCLGFBQWEsQ0FBQ3BDLE1BQU0sR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDO0VBRS9LLE9BQU87SUFDTG9DLGFBQWE7SUFDYkksT0FBTyxFQUFFMUQsYUFBYSxDQUFDMEQsT0FBTyxDQUFDLENBQUNyRCxNQUFNO0lBQ3RDWTtFQUNGLENBQUM7QUFDSDtBQUVBLFNBQVN1RCx1QkFBdUJBLENBQUEsRUFBeUI7RUFDdkQsTUFBTUMsSUFBMEIsR0FBRyxDQUFDLENBQUM7RUFDckNBLElBQUksQ0FBQ0Msb0NBQVksQ0FBQ0MsT0FBTyxDQUFDLEdBQUcsQ0FBQzdFLFdBQVcsQ0FBQztFQUMxQzJFLElBQUksQ0FBQ0Msb0NBQVksQ0FBQ0UsY0FBYyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7RUFDeENILElBQUksQ0FBQ0Msb0NBQVksQ0FBQ0csZUFBZSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7RUFDekNKLElBQUksQ0FBQ0Msb0NBQVksQ0FBQ0ksWUFBWSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7RUFDdEMsT0FBT0wsSUFBSTtBQUNiO0FBRUEsU0FBU00saUJBQWlCQSxDQUFDQyxXQUF1QyxFQUFFO0VBQ2xFLE9BQU8sQ0FDTDtJQUFFQyxRQUFRLEVBQUUsVUFBVTtJQUFFQyxLQUFLLEVBQUVGLFdBQVcsQ0FBQ0c7RUFBRyxDQUFDLEVBQy9DO0lBQUVGLFFBQVEsRUFBRSxnQkFBZ0I7SUFBRUMsS0FBSyxFQUFFRixXQUFXLENBQUNJO0VBQVMsQ0FBQyxDQUM1RDtBQUNIO0FBSUEsTUFBTUMsdUJBQXVCLFNBQVNDLDhDQUFzQixDQUE2QjtFQUM3RUMsV0FBV0EsQ0FBQSxFQUFzQztJQUN6RCxPQUFPO01BQ0xDLEtBQUssRUFBRSxJQUFJO01BQ1hDLE1BQU0sRUFBRTtJQUNWLENBQUM7RUFDSDtFQUVBQyxlQUFlQSxDQUFDVixXQUF1QyxFQUFFO0lBQ3ZELE9BQU87TUFDTFcsUUFBUSxFQUFFOUYsU0FBUztNQUNuQitGLE1BQU0sRUFBRWIsaUJBQWlCLENBQUNDLFdBQVcsQ0FBQztNQUN0Q2Esb0JBQW9CLEVBQUUsTUFBQUEsQ0FBQSxLQUFZO1FBQ2hDLE1BQU1DLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQ3BELElBQUksQ0FBQ3FELENBQUMsQ0FBQyxxQ0FBcUMsQ0FBQztRQUN2RSxJQUFJRCxNQUFNLEVBQUU7VUFDVixNQUFNQSxNQUFNLENBQUNFLEtBQUssQ0FBQyxDQUFDO1FBQ3RCO01BQ0YsQ0FBQztNQUNEQyxlQUFlLEVBQUV6Qix1QkFBdUIsQ0FBQztJQUMzQyxDQUFDO0VBQ0g7RUFFQSxNQUFNMEIsU0FBU0EsQ0FBQSxFQUFHO0lBQ2hCLE1BQU1DLE9BQU8sR0FBRyxNQUFNMUQsaUJBQWlCLENBQUMsSUFBSSxDQUFDQyxJQUFJLEVBQUUsSUFBSSxDQUFDQyxPQUFPLENBQUM7SUFDaEUsT0FBTztNQUNMeUQsT0FBTyxFQUFFLElBQUk7TUFDYkMsUUFBUSxFQUFFLENBQUNGLE9BQU87SUFDcEIsQ0FBQztFQUNIO0FBQ0Y7QUFBQyxJQUFBRyxRQUFBLEdBQUFDLE9BQUEsQ0FBQTlHLE9BQUEsR0FFYzRGLHVCQUF1QiIsImlnbm9yZUxpc3QiOltdfQ==