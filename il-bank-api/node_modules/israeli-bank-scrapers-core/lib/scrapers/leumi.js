"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
require("core-js/modules/es.regexp.exec.js");
require("core-js/modules/es.string.replace.js");
var _moment = _interopRequireDefault(require("moment"));
var _constants = require("../constants");
var _debug = require("../helpers/debug");
var _elementsInteractions = require("../helpers/elements-interactions");
var _navigation = require("../helpers/navigation");
var _transactions = require("../transactions");
var _baseScraperWithBrowser = require("./base-scraper-with-browser");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const debug = (0, _debug.getDebug)('leumi');
const BASE_URL = 'https://hb2.bankleumi.co.il';
const LOGIN_URL = 'https://www.leumi.co.il/';
const TRANSACTIONS_URL = `${BASE_URL}/eBanking/SO/SPA.aspx#/ts/BusinessAccountTrx?WidgetPar=1`;
const FILTERED_TRANSACTIONS_URL = `${BASE_URL}/ChannelWCF/Broker.svc/ProcessRequest?moduleName=UC_SO_27_GetBusinessAccountTrx`;
const DATE_FORMAT = 'DD.MM.YY';
const ACCOUNT_BLOCKED_MSG = 'המנוי חסום';
const INVALID_PASSWORD_MSG = 'אחד או יותר מפרטי ההזדהות שמסרת שגויים. ניתן לנסות שוב';
function getPossibleLoginResults() {
  const urls = {
    [_baseScraperWithBrowser.LoginResults.Success]: [/ebanking\/SO\/SPA.aspx/i],
    [_baseScraperWithBrowser.LoginResults.InvalidPassword]: [async options => {
      if (!options || !options.page) {
        throw new Error('missing page options argument');
      }
      const errorMessage = await (0, _elementsInteractions.pageEvalAll)(options.page, 'svg#Capa_1', '', element => {
        var _element$;
        return (_element$ = element[0]) === null || _element$ === void 0 || (_element$ = _element$.parentElement) === null || _element$ === void 0 || (_element$ = _element$.children[1]) === null || _element$ === void 0 ? void 0 : _element$.innerText;
      });
      return errorMessage === null || errorMessage === void 0 ? void 0 : errorMessage.startsWith(INVALID_PASSWORD_MSG);
    }],
    [_baseScraperWithBrowser.LoginResults.AccountBlocked]: [
    // NOTICE - might not be relevant starting the Leumi re-design during 2022 Sep
    async options => {
      if (!options || !options.page) {
        throw new Error('missing page options argument');
      }
      const errorMessage = await (0, _elementsInteractions.pageEvalAll)(options.page, '.errHeader', '', label => {
        var _label$;
        return (_label$ = label[0]) === null || _label$ === void 0 ? void 0 : _label$.innerText;
      });
      return errorMessage === null || errorMessage === void 0 ? void 0 : errorMessage.startsWith(ACCOUNT_BLOCKED_MSG);
    }],
    [_baseScraperWithBrowser.LoginResults.ChangePassword]: ['https://hb2.bankleumi.co.il/authenticate'] // NOTICE - might not be relevant starting the Leumi re-design during 2022 Sep
  };
  return urls;
}
function createLoginFields(credentials) {
  return [{
    selector: 'input[placeholder="שם משתמש"]',
    value: credentials.username
  }, {
    selector: 'input[placeholder="סיסמה"]',
    value: credentials.password
  }];
}
function extractTransactionsFromPage(transactions, status) {
  if (transactions === null || transactions.length === 0) {
    return [];
  }
  const result = transactions.map(rawTransaction => {
    const date = (0, _moment.default)(rawTransaction.DateUTC).milliseconds(0).toISOString();
    const newTransaction = {
      status,
      type: _transactions.TransactionTypes.Normal,
      date,
      processedDate: date,
      description: rawTransaction.Description || '',
      identifier: rawTransaction.ReferenceNumberLong,
      memo: rawTransaction.AdditionalData || '',
      originalCurrency: _constants.SHEKEL_CURRENCY,
      chargedAmount: rawTransaction.Amount,
      originalAmount: rawTransaction.Amount
    };
    return newTransaction;
  });
  return result;
}
function hangProcess(timeout) {
  return new Promise(resolve => {
    setTimeout(() => {
      resolve();
    }, timeout);
  });
}
async function clickByXPath(page, xpath) {
  await page.waitForSelector(xpath, {
    timeout: 30000,
    visible: true
  });
  const elm = await page.$$(xpath);
  await elm[0].click();
}
function removeSpecialCharacters(str) {
  return str.replace(/[^0-9/-]/g, '');
}
async function fetchTransactionsForAccount(page, startDate, accountId) {
  // DEVELOPER NOTICE the account number received from the server is being altered at
  // runtime for some accounts after 1-2 seconds so we need to hang the process for a short while.
  await hangProcess(4000);
  await (0, _elementsInteractions.waitUntilElementFound)(page, 'button[title="חיפוש מתקדם"]', true);
  await (0, _elementsInteractions.clickButton)(page, 'button[title="חיפוש מתקדם"]');
  await (0, _elementsInteractions.waitUntilElementFound)(page, 'bll-radio-button', true);
  await (0, _elementsInteractions.clickButton)(page, 'bll-radio-button:not([checked])');
  await (0, _elementsInteractions.waitUntilElementFound)(page, 'input[formcontrolname="txtInputFrom"]', true);
  await (0, _elementsInteractions.fillInput)(page, 'input[formcontrolname="txtInputFrom"]', startDate.format(DATE_FORMAT));

  // we must blur the from control otherwise the search will use the previous value
  await page.focus("button[aria-label='סנן']");
  await (0, _elementsInteractions.clickButton)(page, "button[aria-label='סנן']");
  const finalResponse = await page.waitForResponse(response => {
    return response.url() === FILTERED_TRANSACTIONS_URL && response.request().method() === 'POST';
  });
  const responseJson = await finalResponse.json();
  const accountNumber = accountId.replace('/', '_').replace(/[^\d-_]/g, '');
  const response = JSON.parse(responseJson.jsonResp);
  const pendingTransactions = response.TodayTransactionsItems;
  const transactions = response.HistoryTransactionsItems;
  const balance = response.BalanceDisplay ? parseFloat(response.BalanceDisplay) : undefined;
  const pendingTxns = extractTransactionsFromPage(pendingTransactions, _transactions.TransactionStatuses.Pending);
  const completedTxns = extractTransactionsFromPage(transactions, _transactions.TransactionStatuses.Completed);
  const txns = [...pendingTxns, ...completedTxns];
  return {
    accountNumber,
    balance,
    txns
  };
}
async function fetchTransactions(page, startDate) {
  const accounts = [];

  // DEVELOPER NOTICE the account number received from the server is being altered at
  // runtime for some accounts after 1-2 seconds so we need to hang the process for a short while.
  await hangProcess(4000);
  const accountsIds = await page.evaluate(() => Array.from(document.querySelectorAll('app-masked-number-combo span.display-number-li'), e => e.textContent));

  // due to a bug, the altered value might include undesired signs like & that should be removed

  if (!accountsIds.length) {
    throw new Error('Failed to extract or parse the account number');
  }
  for (const accountId of accountsIds) {
    if (accountsIds.length > 1) {
      // get list of accounts and check accountId
      await clickByXPath(page, 'xpath///*[contains(@class, "number") and contains(@class, "combo-inner")]');
      await clickByXPath(page, `xpath///span[contains(text(), '${accountId}')]`);
    }
    accounts.push(await fetchTransactionsForAccount(page, startDate, removeSpecialCharacters(accountId)));
  }
  return accounts;
}
async function navigateToLogin(page) {
  const loginButtonSelector = '.enter-account a[originaltitle="כניסה לחשבונך"]';
  debug('wait for homepage to click on login button');
  await (0, _elementsInteractions.waitUntilElementFound)(page, loginButtonSelector);
  debug('navigate to login page');
  const loginUrl = await (0, _elementsInteractions.pageEval)(page, loginButtonSelector, null, element => {
    return element.href;
  });
  debug(`navigating to page (${loginUrl})`);
  await page.goto(loginUrl);
  debug('waiting for page to be loaded (networkidle2)');
  await (0, _navigation.waitForNavigation)(page, {
    waitUntil: 'networkidle2'
  });
  debug('waiting for components of login to enter credentials');
  await Promise.all([(0, _elementsInteractions.waitUntilElementFound)(page, 'input[placeholder="שם משתמש"]', true), (0, _elementsInteractions.waitUntilElementFound)(page, 'input[placeholder="סיסמה"]', true), (0, _elementsInteractions.waitUntilElementFound)(page, 'button[type="submit"]', true)]);
}
async function waitForPostLogin(page) {
  await Promise.race([(0, _elementsInteractions.waitUntilElementFound)(page, 'a[title="דלג לחשבון"]', true, 60000), (0, _elementsInteractions.waitUntilElementFound)(page, 'div.main-content', false, 60000), page.waitForSelector(`xpath//div[contains(string(),"${INVALID_PASSWORD_MSG}")]`), (0, _elementsInteractions.waitUntilElementFound)(page, 'form[action="/changepassword"]', true, 60000) // not sure if they kept this one
  ]);
}
class LeumiScraper extends _baseScraperWithBrowser.BaseScraperWithBrowser {
  getLoginOptions(credentials) {
    return {
      loginUrl: LOGIN_URL,
      fields: createLoginFields(credentials),
      submitButtonSelector: "button[type='submit']",
      checkReadiness: async () => navigateToLogin(this.page),
      postAction: async () => waitForPostLogin(this.page),
      possibleResults: getPossibleLoginResults()
    };
  }
  async fetchData() {
    const minimumStartMoment = (0, _moment.default)().subtract(3, 'years').add(1, 'day');
    const defaultStartMoment = (0, _moment.default)().subtract(1, 'years').add(1, 'day');
    const startDate = this.options.startDate || defaultStartMoment.toDate();
    const startMoment = _moment.default.max(minimumStartMoment, (0, _moment.default)(startDate));
    await this.navigateTo(TRANSACTIONS_URL);
    const accounts = await fetchTransactions(this.page, startMoment);
    return {
      success: true,
      accounts
    };
  }
}
var _default = exports.default = LeumiScraper;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbW9tZW50IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfY29uc3RhbnRzIiwiX2RlYnVnIiwiX2VsZW1lbnRzSW50ZXJhY3Rpb25zIiwiX25hdmlnYXRpb24iLCJfdHJhbnNhY3Rpb25zIiwiX2Jhc2VTY3JhcGVyV2l0aEJyb3dzZXIiLCJlIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJkZWJ1ZyIsImdldERlYnVnIiwiQkFTRV9VUkwiLCJMT0dJTl9VUkwiLCJUUkFOU0FDVElPTlNfVVJMIiwiRklMVEVSRURfVFJBTlNBQ1RJT05TX1VSTCIsIkRBVEVfRk9STUFUIiwiQUNDT1VOVF9CTE9DS0VEX01TRyIsIklOVkFMSURfUEFTU1dPUkRfTVNHIiwiZ2V0UG9zc2libGVMb2dpblJlc3VsdHMiLCJ1cmxzIiwiTG9naW5SZXN1bHRzIiwiU3VjY2VzcyIsIkludmFsaWRQYXNzd29yZCIsIm9wdGlvbnMiLCJwYWdlIiwiRXJyb3IiLCJlcnJvck1lc3NhZ2UiLCJwYWdlRXZhbEFsbCIsImVsZW1lbnQiLCJfZWxlbWVudCQiLCJwYXJlbnRFbGVtZW50IiwiY2hpbGRyZW4iLCJpbm5lclRleHQiLCJzdGFydHNXaXRoIiwiQWNjb3VudEJsb2NrZWQiLCJsYWJlbCIsIl9sYWJlbCQiLCJDaGFuZ2VQYXNzd29yZCIsImNyZWF0ZUxvZ2luRmllbGRzIiwiY3JlZGVudGlhbHMiLCJzZWxlY3RvciIsInZhbHVlIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsImV4dHJhY3RUcmFuc2FjdGlvbnNGcm9tUGFnZSIsInRyYW5zYWN0aW9ucyIsInN0YXR1cyIsImxlbmd0aCIsInJlc3VsdCIsIm1hcCIsInJhd1RyYW5zYWN0aW9uIiwiZGF0ZSIsIm1vbWVudCIsIkRhdGVVVEMiLCJtaWxsaXNlY29uZHMiLCJ0b0lTT1N0cmluZyIsIm5ld1RyYW5zYWN0aW9uIiwidHlwZSIsIlRyYW5zYWN0aW9uVHlwZXMiLCJOb3JtYWwiLCJwcm9jZXNzZWREYXRlIiwiZGVzY3JpcHRpb24iLCJEZXNjcmlwdGlvbiIsImlkZW50aWZpZXIiLCJSZWZlcmVuY2VOdW1iZXJMb25nIiwibWVtbyIsIkFkZGl0aW9uYWxEYXRhIiwib3JpZ2luYWxDdXJyZW5jeSIsIlNIRUtFTF9DVVJSRU5DWSIsImNoYXJnZWRBbW91bnQiLCJBbW91bnQiLCJvcmlnaW5hbEFtb3VudCIsImhhbmdQcm9jZXNzIiwidGltZW91dCIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0VGltZW91dCIsImNsaWNrQnlYUGF0aCIsInhwYXRoIiwid2FpdEZvclNlbGVjdG9yIiwidmlzaWJsZSIsImVsbSIsIiQkIiwiY2xpY2siLCJyZW1vdmVTcGVjaWFsQ2hhcmFjdGVycyIsInN0ciIsInJlcGxhY2UiLCJmZXRjaFRyYW5zYWN0aW9uc0ZvckFjY291bnQiLCJzdGFydERhdGUiLCJhY2NvdW50SWQiLCJ3YWl0VW50aWxFbGVtZW50Rm91bmQiLCJjbGlja0J1dHRvbiIsImZpbGxJbnB1dCIsImZvcm1hdCIsImZvY3VzIiwiZmluYWxSZXNwb25zZSIsIndhaXRGb3JSZXNwb25zZSIsInJlc3BvbnNlIiwidXJsIiwicmVxdWVzdCIsIm1ldGhvZCIsInJlc3BvbnNlSnNvbiIsImpzb24iLCJhY2NvdW50TnVtYmVyIiwiSlNPTiIsInBhcnNlIiwianNvblJlc3AiLCJwZW5kaW5nVHJhbnNhY3Rpb25zIiwiVG9kYXlUcmFuc2FjdGlvbnNJdGVtcyIsIkhpc3RvcnlUcmFuc2FjdGlvbnNJdGVtcyIsImJhbGFuY2UiLCJCYWxhbmNlRGlzcGxheSIsInBhcnNlRmxvYXQiLCJ1bmRlZmluZWQiLCJwZW5kaW5nVHhucyIsIlRyYW5zYWN0aW9uU3RhdHVzZXMiLCJQZW5kaW5nIiwiY29tcGxldGVkVHhucyIsIkNvbXBsZXRlZCIsInR4bnMiLCJmZXRjaFRyYW5zYWN0aW9ucyIsImFjY291bnRzIiwiYWNjb3VudHNJZHMiLCJldmFsdWF0ZSIsIkFycmF5IiwiZnJvbSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsInRleHRDb250ZW50IiwicHVzaCIsIm5hdmlnYXRlVG9Mb2dpbiIsImxvZ2luQnV0dG9uU2VsZWN0b3IiLCJsb2dpblVybCIsInBhZ2VFdmFsIiwiaHJlZiIsImdvdG8iLCJ3YWl0Rm9yTmF2aWdhdGlvbiIsIndhaXRVbnRpbCIsImFsbCIsIndhaXRGb3JQb3N0TG9naW4iLCJyYWNlIiwiTGV1bWlTY3JhcGVyIiwiQmFzZVNjcmFwZXJXaXRoQnJvd3NlciIsImdldExvZ2luT3B0aW9ucyIsImZpZWxkcyIsInN1Ym1pdEJ1dHRvblNlbGVjdG9yIiwiY2hlY2tSZWFkaW5lc3MiLCJwb3N0QWN0aW9uIiwicG9zc2libGVSZXN1bHRzIiwiZmV0Y2hEYXRhIiwibWluaW11bVN0YXJ0TW9tZW50Iiwic3VidHJhY3QiLCJhZGQiLCJkZWZhdWx0U3RhcnRNb21lbnQiLCJ0b0RhdGUiLCJzdGFydE1vbWVudCIsIm1heCIsIm5hdmlnYXRlVG8iLCJzdWNjZXNzIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NjcmFwZXJzL2xldW1pLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtb21lbnQsIHsgdHlwZSBNb21lbnQgfSBmcm9tICdtb21lbnQnO1xuaW1wb3J0IHsgdHlwZSBQYWdlIH0gZnJvbSAncHVwcGV0ZWVyLWNvcmUnO1xuaW1wb3J0IHsgU0hFS0VMX0NVUlJFTkNZIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCB7IGdldERlYnVnIH0gZnJvbSAnLi4vaGVscGVycy9kZWJ1Zyc7XG5pbXBvcnQge1xuICBjbGlja0J1dHRvbixcbiAgZmlsbElucHV0LFxuICBwYWdlRXZhbCxcbiAgcGFnZUV2YWxBbGwsXG4gIHdhaXRVbnRpbEVsZW1lbnRGb3VuZCxcbn0gZnJvbSAnLi4vaGVscGVycy9lbGVtZW50cy1pbnRlcmFjdGlvbnMnO1xuaW1wb3J0IHsgd2FpdEZvck5hdmlnYXRpb24gfSBmcm9tICcuLi9oZWxwZXJzL25hdmlnYXRpb24nO1xuaW1wb3J0IHtcbiAgVHJhbnNhY3Rpb25TdGF0dXNlcywgVHJhbnNhY3Rpb25UeXBlcyxcbiAgdHlwZSBUcmFuc2FjdGlvbixcbiAgdHlwZSBUcmFuc2FjdGlvbnNBY2NvdW50LFxufSBmcm9tICcuLi90cmFuc2FjdGlvbnMnO1xuaW1wb3J0IHsgQmFzZVNjcmFwZXJXaXRoQnJvd3NlciwgTG9naW5SZXN1bHRzLCB0eXBlIExvZ2luT3B0aW9ucyB9IGZyb20gJy4vYmFzZS1zY3JhcGVyLXdpdGgtYnJvd3Nlcic7XG5pbXBvcnQgeyB0eXBlIFNjcmFwZXJTY3JhcGluZ1Jlc3VsdCB9IGZyb20gJy4vaW50ZXJmYWNlJztcblxuY29uc3QgZGVidWcgPSBnZXREZWJ1ZygnbGV1bWknKTtcbmNvbnN0IEJBU0VfVVJMID0gJ2h0dHBzOi8vaGIyLmJhbmtsZXVtaS5jby5pbCc7XG5jb25zdCBMT0dJTl9VUkwgPSAnaHR0cHM6Ly93d3cubGV1bWkuY28uaWwvJztcbmNvbnN0IFRSQU5TQUNUSU9OU19VUkwgPSBgJHtCQVNFX1VSTH0vZUJhbmtpbmcvU08vU1BBLmFzcHgjL3RzL0J1c2luZXNzQWNjb3VudFRyeD9XaWRnZXRQYXI9MWA7XG5jb25zdCBGSUxURVJFRF9UUkFOU0FDVElPTlNfVVJMID0gYCR7QkFTRV9VUkx9L0NoYW5uZWxXQ0YvQnJva2VyLnN2Yy9Qcm9jZXNzUmVxdWVzdD9tb2R1bGVOYW1lPVVDX1NPXzI3X0dldEJ1c2luZXNzQWNjb3VudFRyeGA7XG5cbmNvbnN0IERBVEVfRk9STUFUID0gJ0RELk1NLllZJztcbmNvbnN0IEFDQ09VTlRfQkxPQ0tFRF9NU0cgPSAn15TXnteg15XXmSDXl9eh15XXnSc7XG5jb25zdCBJTlZBTElEX1BBU1NXT1JEX01TRyA9ICfXkNeX15Mg15DXlSDXmdeV16rXqCDXntek16jXmNeZINeU15TXlteT15TXldeqINep157Xodeo16og16nXkteV15nXmdedLiDXoNeZ16rXnyDXnNeg16HXldeqINep15XXkSc7XG5cbmZ1bmN0aW9uIGdldFBvc3NpYmxlTG9naW5SZXN1bHRzKCkge1xuICBjb25zdCB1cmxzOiBMb2dpbk9wdGlvbnNbJ3Bvc3NpYmxlUmVzdWx0cyddID0ge1xuICAgIFtMb2dpblJlc3VsdHMuU3VjY2Vzc106IFsvZWJhbmtpbmdcXC9TT1xcL1NQQS5hc3B4L2ldLFxuICAgIFtMb2dpblJlc3VsdHMuSW52YWxpZFBhc3N3b3JkXTogW1xuICAgICAgYXN5bmMgKG9wdGlvbnMpID0+IHtcbiAgICAgICAgaWYgKCFvcHRpb25zIHx8ICFvcHRpb25zLnBhZ2UpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ21pc3NpbmcgcGFnZSBvcHRpb25zIGFyZ3VtZW50Jyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gYXdhaXQgcGFnZUV2YWxBbGwob3B0aW9ucy5wYWdlLCAnc3ZnI0NhcGFfMScsICcnLCAoZWxlbWVudCkgPT4ge1xuICAgICAgICAgIHJldHVybiAoZWxlbWVudFswXT8ucGFyZW50RWxlbWVudD8uY2hpbGRyZW5bMV0gYXMgSFRNTERpdkVsZW1lbnQpPy5pbm5lclRleHQ7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBlcnJvck1lc3NhZ2U/LnN0YXJ0c1dpdGgoSU5WQUxJRF9QQVNTV09SRF9NU0cpO1xuICAgICAgfSxcbiAgICBdLFxuICAgIFtMb2dpblJlc3VsdHMuQWNjb3VudEJsb2NrZWRdOiBbIC8vIE5PVElDRSAtIG1pZ2h0IG5vdCBiZSByZWxldmFudCBzdGFydGluZyB0aGUgTGV1bWkgcmUtZGVzaWduIGR1cmluZyAyMDIyIFNlcFxuICAgICAgYXN5bmMgKG9wdGlvbnMpID0+IHtcbiAgICAgICAgaWYgKCFvcHRpb25zIHx8ICFvcHRpb25zLnBhZ2UpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ21pc3NpbmcgcGFnZSBvcHRpb25zIGFyZ3VtZW50Jyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gYXdhaXQgcGFnZUV2YWxBbGwob3B0aW9ucy5wYWdlLCAnLmVyckhlYWRlcicsICcnLCAobGFiZWwpID0+IHtcbiAgICAgICAgICByZXR1cm4gKGxhYmVsWzBdIGFzIEhUTUxFbGVtZW50KT8uaW5uZXJUZXh0O1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlPy5zdGFydHNXaXRoKEFDQ09VTlRfQkxPQ0tFRF9NU0cpO1xuICAgICAgfSxcbiAgICBdLFxuICAgIFtMb2dpblJlc3VsdHMuQ2hhbmdlUGFzc3dvcmRdOiBbJ2h0dHBzOi8vaGIyLmJhbmtsZXVtaS5jby5pbC9hdXRoZW50aWNhdGUnXSwgLy8gTk9USUNFIC0gbWlnaHQgbm90IGJlIHJlbGV2YW50IHN0YXJ0aW5nIHRoZSBMZXVtaSByZS1kZXNpZ24gZHVyaW5nIDIwMjIgU2VwXG4gIH07XG4gIHJldHVybiB1cmxzO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMb2dpbkZpZWxkcyhjcmVkZW50aWFsczogU2NyYXBlclNwZWNpZmljQ3JlZGVudGlhbHMpIHtcbiAgcmV0dXJuIFtcbiAgICB7IHNlbGVjdG9yOiAnaW5wdXRbcGxhY2Vob2xkZXI9XCLXqdedINee16nXqtee16lcIl0nLCB2YWx1ZTogY3JlZGVudGlhbHMudXNlcm5hbWUgfSxcbiAgICB7IHNlbGVjdG9yOiAnaW5wdXRbcGxhY2Vob2xkZXI9XCLXodeZ16HXnteUXCJdJywgdmFsdWU6IGNyZWRlbnRpYWxzLnBhc3N3b3JkIH0sXG4gIF07XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RUcmFuc2FjdGlvbnNGcm9tUGFnZSh0cmFuc2FjdGlvbnM6IGFueVtdLCBzdGF0dXM6IFRyYW5zYWN0aW9uU3RhdHVzZXMpOiBUcmFuc2FjdGlvbltdIHtcbiAgaWYgKHRyYW5zYWN0aW9ucyA9PT0gbnVsbCB8fCB0cmFuc2FjdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgY29uc3QgcmVzdWx0OiBUcmFuc2FjdGlvbltdID0gdHJhbnNhY3Rpb25zLm1hcCgocmF3VHJhbnNhY3Rpb24pID0+IHtcbiAgICBjb25zdCBkYXRlID0gbW9tZW50KHJhd1RyYW5zYWN0aW9uLkRhdGVVVEMpLm1pbGxpc2Vjb25kcygwKS50b0lTT1N0cmluZygpO1xuICAgIGNvbnN0IG5ld1RyYW5zYWN0aW9uOiBUcmFuc2FjdGlvbiA9IHtcbiAgICAgIHN0YXR1cyxcbiAgICAgIHR5cGU6IFRyYW5zYWN0aW9uVHlwZXMuTm9ybWFsLFxuICAgICAgZGF0ZSxcbiAgICAgIHByb2Nlc3NlZERhdGU6IGRhdGUsXG4gICAgICBkZXNjcmlwdGlvbjogcmF3VHJhbnNhY3Rpb24uRGVzY3JpcHRpb24gfHwgJycsXG4gICAgICBpZGVudGlmaWVyOiByYXdUcmFuc2FjdGlvbi5SZWZlcmVuY2VOdW1iZXJMb25nLFxuICAgICAgbWVtbzogcmF3VHJhbnNhY3Rpb24uQWRkaXRpb25hbERhdGEgfHwgJycsXG4gICAgICBvcmlnaW5hbEN1cnJlbmN5OiBTSEVLRUxfQ1VSUkVOQ1ksXG4gICAgICBjaGFyZ2VkQW1vdW50OiByYXdUcmFuc2FjdGlvbi5BbW91bnQsXG4gICAgICBvcmlnaW5hbEFtb3VudDogcmF3VHJhbnNhY3Rpb24uQW1vdW50LFxuICAgIH07XG5cbiAgICByZXR1cm4gbmV3VHJhbnNhY3Rpb247XG4gIH0pO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGhhbmdQcm9jZXNzKHRpbWVvdXQ6IG51bWJlcikge1xuICByZXR1cm4gbmV3IFByb21pc2U8dm9pZD4oKHJlc29sdmUpID0+IHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHJlc29sdmUoKTtcbiAgICB9LCB0aW1lb3V0KTtcbiAgfSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNsaWNrQnlYUGF0aChwYWdlOiBQYWdlLCB4cGF0aDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gIGF3YWl0IHBhZ2Uud2FpdEZvclNlbGVjdG9yKHhwYXRoLCB7IHRpbWVvdXQ6IDMwMDAwLCB2aXNpYmxlOiB0cnVlIH0pO1xuICBjb25zdCBlbG0gPSBhd2FpdCBwYWdlLiQkKHhwYXRoKTtcbiAgYXdhaXQgZWxtWzBdLmNsaWNrKCk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVNwZWNpYWxDaGFyYWN0ZXJzKHN0cjogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9bXjAtOS8tXS9nLCAnJyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGZldGNoVHJhbnNhY3Rpb25zRm9yQWNjb3VudChwYWdlOiBQYWdlLCBzdGFydERhdGU6IE1vbWVudCwgYWNjb3VudElkOiBzdHJpbmcpOiBQcm9taXNlPFRyYW5zYWN0aW9uc0FjY291bnQ+IHtcbiAgLy8gREVWRUxPUEVSIE5PVElDRSB0aGUgYWNjb3VudCBudW1iZXIgcmVjZWl2ZWQgZnJvbSB0aGUgc2VydmVyIGlzIGJlaW5nIGFsdGVyZWQgYXRcbiAgLy8gcnVudGltZSBmb3Igc29tZSBhY2NvdW50cyBhZnRlciAxLTIgc2Vjb25kcyBzbyB3ZSBuZWVkIHRvIGhhbmcgdGhlIHByb2Nlc3MgZm9yIGEgc2hvcnQgd2hpbGUuXG4gIGF3YWl0IGhhbmdQcm9jZXNzKDQwMDApO1xuXG4gIGF3YWl0IHdhaXRVbnRpbEVsZW1lbnRGb3VuZChwYWdlLCAnYnV0dG9uW3RpdGxlPVwi15fXmdek15XXqSDXnteq16fXk9edXCJdJywgdHJ1ZSk7XG4gIGF3YWl0IGNsaWNrQnV0dG9uKHBhZ2UsICdidXR0b25bdGl0bGU9XCLXl9eZ16TXldepINee16rXp9eT151cIl0nKTtcbiAgYXdhaXQgd2FpdFVudGlsRWxlbWVudEZvdW5kKHBhZ2UsICdibGwtcmFkaW8tYnV0dG9uJywgdHJ1ZSk7XG4gIGF3YWl0IGNsaWNrQnV0dG9uKHBhZ2UsICdibGwtcmFkaW8tYnV0dG9uOm5vdChbY2hlY2tlZF0pJyk7XG5cbiAgYXdhaXQgd2FpdFVudGlsRWxlbWVudEZvdW5kKHBhZ2UsICdpbnB1dFtmb3JtY29udHJvbG5hbWU9XCJ0eHRJbnB1dEZyb21cIl0nLCB0cnVlKTtcblxuICBhd2FpdCBmaWxsSW5wdXQoXG4gICAgcGFnZSxcbiAgICAnaW5wdXRbZm9ybWNvbnRyb2xuYW1lPVwidHh0SW5wdXRGcm9tXCJdJyxcbiAgICBzdGFydERhdGUuZm9ybWF0KERBVEVfRk9STUFUKSxcbiAgKTtcblxuICAvLyB3ZSBtdXN0IGJsdXIgdGhlIGZyb20gY29udHJvbCBvdGhlcndpc2UgdGhlIHNlYXJjaCB3aWxsIHVzZSB0aGUgcHJldmlvdXMgdmFsdWVcbiAgYXdhaXQgcGFnZS5mb2N1cyhcImJ1dHRvblthcmlhLWxhYmVsPSfXodeg158nXVwiKTtcblxuICBhd2FpdCBjbGlja0J1dHRvbihwYWdlLCBcImJ1dHRvblthcmlhLWxhYmVsPSfXodeg158nXVwiKTtcbiAgY29uc3QgZmluYWxSZXNwb25zZSA9IGF3YWl0IHBhZ2Uud2FpdEZvclJlc3BvbnNlKChyZXNwb25zZSkgPT4ge1xuICAgIHJldHVybiByZXNwb25zZS51cmwoKSA9PT0gRklMVEVSRURfVFJBTlNBQ1RJT05TX1VSTCAmJlxuICAgICAgcmVzcG9uc2UucmVxdWVzdCgpLm1ldGhvZCgpID09PSAnUE9TVCc7XG4gIH0pO1xuXG4gIGNvbnN0IHJlc3BvbnNlSnNvbjogYW55ID0gYXdhaXQgZmluYWxSZXNwb25zZS5qc29uKCk7XG5cbiAgY29uc3QgYWNjb3VudE51bWJlciA9IGFjY291bnRJZC5yZXBsYWNlKCcvJywgJ18nKS5yZXBsYWNlKC9bXlxcZC1fXS9nLCAnJyk7XG5cbiAgY29uc3QgcmVzcG9uc2UgPSBKU09OLnBhcnNlKHJlc3BvbnNlSnNvbi5qc29uUmVzcCk7XG5cbiAgY29uc3QgcGVuZGluZ1RyYW5zYWN0aW9ucyA9IHJlc3BvbnNlLlRvZGF5VHJhbnNhY3Rpb25zSXRlbXM7XG4gIGNvbnN0IHRyYW5zYWN0aW9ucyA9IHJlc3BvbnNlLkhpc3RvcnlUcmFuc2FjdGlvbnNJdGVtcztcbiAgY29uc3QgYmFsYW5jZSA9IHJlc3BvbnNlLkJhbGFuY2VEaXNwbGF5ID8gcGFyc2VGbG9hdChyZXNwb25zZS5CYWxhbmNlRGlzcGxheSkgOiB1bmRlZmluZWQ7XG5cbiAgY29uc3QgcGVuZGluZ1R4bnMgPSBleHRyYWN0VHJhbnNhY3Rpb25zRnJvbVBhZ2UocGVuZGluZ1RyYW5zYWN0aW9ucywgVHJhbnNhY3Rpb25TdGF0dXNlcy5QZW5kaW5nKTtcbiAgY29uc3QgY29tcGxldGVkVHhucyA9IGV4dHJhY3RUcmFuc2FjdGlvbnNGcm9tUGFnZSh0cmFuc2FjdGlvbnMsIFRyYW5zYWN0aW9uU3RhdHVzZXMuQ29tcGxldGVkKTtcbiAgY29uc3QgdHhucyA9IFtcbiAgICAuLi5wZW5kaW5nVHhucyxcbiAgICAuLi5jb21wbGV0ZWRUeG5zLFxuICBdO1xuXG4gIHJldHVybiB7XG4gICAgYWNjb3VudE51bWJlcixcbiAgICBiYWxhbmNlLFxuICAgIHR4bnMsXG4gIH07XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGZldGNoVHJhbnNhY3Rpb25zKHBhZ2U6IFBhZ2UsIHN0YXJ0RGF0ZTogTW9tZW50KTogUHJvbWlzZTxUcmFuc2FjdGlvbnNBY2NvdW50W10+IHtcbiAgY29uc3QgYWNjb3VudHM6IFRyYW5zYWN0aW9uc0FjY291bnRbXSA9IFtdO1xuXG4gIC8vIERFVkVMT1BFUiBOT1RJQ0UgdGhlIGFjY291bnQgbnVtYmVyIHJlY2VpdmVkIGZyb20gdGhlIHNlcnZlciBpcyBiZWluZyBhbHRlcmVkIGF0XG4gIC8vIHJ1bnRpbWUgZm9yIHNvbWUgYWNjb3VudHMgYWZ0ZXIgMS0yIHNlY29uZHMgc28gd2UgbmVlZCB0byBoYW5nIHRoZSBwcm9jZXNzIGZvciBhIHNob3J0IHdoaWxlLlxuICBhd2FpdCBoYW5nUHJvY2Vzcyg0MDAwKTtcblxuICBjb25zdCBhY2NvdW50c0lkcyA9IGF3YWl0IHBhZ2UuZXZhbHVhdGUoKCkgPT4gQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdhcHAtbWFza2VkLW51bWJlci1jb21ibyBzcGFuLmRpc3BsYXktbnVtYmVyLWxpJyksIChlKSA9PiBlLnRleHRDb250ZW50KSkgYXMgc3RyaW5nW107XG5cbiAgLy8gZHVlIHRvIGEgYnVnLCB0aGUgYWx0ZXJlZCB2YWx1ZSBtaWdodCBpbmNsdWRlIHVuZGVzaXJlZCBzaWducyBsaWtlICYgdGhhdCBzaG91bGQgYmUgcmVtb3ZlZFxuXG4gIGlmICghYWNjb3VudHNJZHMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gZXh0cmFjdCBvciBwYXJzZSB0aGUgYWNjb3VudCBudW1iZXInKTtcbiAgfVxuXG4gIGZvciAoY29uc3QgYWNjb3VudElkIG9mIGFjY291bnRzSWRzKSB7XG4gICAgaWYgKGFjY291bnRzSWRzLmxlbmd0aCA+IDEpIHtcbiAgICAgIC8vIGdldCBsaXN0IG9mIGFjY291bnRzIGFuZCBjaGVjayBhY2NvdW50SWRcbiAgICAgIGF3YWl0IGNsaWNrQnlYUGF0aChwYWdlLCAneHBhdGgvLy8qW2NvbnRhaW5zKEBjbGFzcywgXCJudW1iZXJcIikgYW5kIGNvbnRhaW5zKEBjbGFzcywgXCJjb21iby1pbm5lclwiKV0nKTtcbiAgICAgIGF3YWl0IGNsaWNrQnlYUGF0aChwYWdlLCBgeHBhdGgvLy9zcGFuW2NvbnRhaW5zKHRleHQoKSwgJyR7YWNjb3VudElkfScpXWApO1xuICAgIH1cblxuICAgIGFjY291bnRzLnB1c2goYXdhaXQgZmV0Y2hUcmFuc2FjdGlvbnNGb3JBY2NvdW50KHBhZ2UsIHN0YXJ0RGF0ZSwgcmVtb3ZlU3BlY2lhbENoYXJhY3RlcnMoYWNjb3VudElkKSkpO1xuICB9XG5cbiAgcmV0dXJuIGFjY291bnRzO1xufVxuXG5hc3luYyBmdW5jdGlvbiBuYXZpZ2F0ZVRvTG9naW4ocGFnZTogUGFnZSk6IFByb21pc2U8dm9pZD4ge1xuICBjb25zdCBsb2dpbkJ1dHRvblNlbGVjdG9yID0gJy5lbnRlci1hY2NvdW50IGFbb3JpZ2luYWx0aXRsZT1cIteb16DXmdeh15Qg15zXl9ep15HXldeg15pcIl0nO1xuICBkZWJ1Zygnd2FpdCBmb3IgaG9tZXBhZ2UgdG8gY2xpY2sgb24gbG9naW4gYnV0dG9uJyk7XG4gIGF3YWl0IHdhaXRVbnRpbEVsZW1lbnRGb3VuZChwYWdlLCBsb2dpbkJ1dHRvblNlbGVjdG9yKTtcbiAgZGVidWcoJ25hdmlnYXRlIHRvIGxvZ2luIHBhZ2UnKTtcbiAgY29uc3QgbG9naW5VcmwgPSBhd2FpdCBwYWdlRXZhbChwYWdlLCBsb2dpbkJ1dHRvblNlbGVjdG9yLCBudWxsLCAoZWxlbWVudCkgPT4ge1xuICAgIHJldHVybiAoZWxlbWVudCBhcyBhbnkpLmhyZWY7XG4gIH0pO1xuICBkZWJ1ZyhgbmF2aWdhdGluZyB0byBwYWdlICgke2xvZ2luVXJsfSlgKTtcbiAgYXdhaXQgcGFnZS5nb3RvKGxvZ2luVXJsKTtcbiAgZGVidWcoJ3dhaXRpbmcgZm9yIHBhZ2UgdG8gYmUgbG9hZGVkIChuZXR3b3JraWRsZTIpJyk7XG4gIGF3YWl0IHdhaXRGb3JOYXZpZ2F0aW9uKHBhZ2UsIHsgd2FpdFVudGlsOiAnbmV0d29ya2lkbGUyJyB9KTtcbiAgZGVidWcoJ3dhaXRpbmcgZm9yIGNvbXBvbmVudHMgb2YgbG9naW4gdG8gZW50ZXIgY3JlZGVudGlhbHMnKTtcbiAgYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgIHdhaXRVbnRpbEVsZW1lbnRGb3VuZChwYWdlLCAnaW5wdXRbcGxhY2Vob2xkZXI9XCLXqdedINee16nXqtee16lcIl0nLCB0cnVlKSxcbiAgICB3YWl0VW50aWxFbGVtZW50Rm91bmQocGFnZSwgJ2lucHV0W3BsYWNlaG9sZGVyPVwi16HXmdeh157XlFwiXScsIHRydWUpLFxuICAgIHdhaXRVbnRpbEVsZW1lbnRGb3VuZChwYWdlLCAnYnV0dG9uW3R5cGU9XCJzdWJtaXRcIl0nLCB0cnVlKSxcbiAgXSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHdhaXRGb3JQb3N0TG9naW4ocGFnZTogUGFnZSk6IFByb21pc2U8dm9pZD4ge1xuICBhd2FpdCBQcm9taXNlLnJhY2UoW1xuICAgIHdhaXRVbnRpbEVsZW1lbnRGb3VuZChwYWdlLCAnYVt0aXRsZT1cIteT15zXkiDXnNeX16nXkdeV159cIl0nLCB0cnVlLCA2MDAwMCksXG4gICAgd2FpdFVudGlsRWxlbWVudEZvdW5kKHBhZ2UsICdkaXYubWFpbi1jb250ZW50JywgZmFsc2UsIDYwMDAwKSxcbiAgICBwYWdlLndhaXRGb3JTZWxlY3RvcihgeHBhdGgvL2Rpdltjb250YWlucyhzdHJpbmcoKSxcIiR7SU5WQUxJRF9QQVNTV09SRF9NU0d9XCIpXWApLFxuICAgIHdhaXRVbnRpbEVsZW1lbnRGb3VuZChwYWdlLCAnZm9ybVthY3Rpb249XCIvY2hhbmdlcGFzc3dvcmRcIl0nLCB0cnVlLCA2MDAwMCksIC8vIG5vdCBzdXJlIGlmIHRoZXkga2VwdCB0aGlzIG9uZVxuICBdKTtcbn1cblxudHlwZSBTY3JhcGVyU3BlY2lmaWNDcmVkZW50aWFscyA9IHsgdXNlcm5hbWU6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZyB9O1xuXG5jbGFzcyBMZXVtaVNjcmFwZXIgZXh0ZW5kcyBCYXNlU2NyYXBlcldpdGhCcm93c2VyPFNjcmFwZXJTcGVjaWZpY0NyZWRlbnRpYWxzPiB7XG4gIGdldExvZ2luT3B0aW9ucyhjcmVkZW50aWFsczogU2NyYXBlclNwZWNpZmljQ3JlZGVudGlhbHMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbG9naW5Vcmw6IExPR0lOX1VSTCxcbiAgICAgIGZpZWxkczogY3JlYXRlTG9naW5GaWVsZHMoY3JlZGVudGlhbHMpLFxuICAgICAgc3VibWl0QnV0dG9uU2VsZWN0b3I6IFwiYnV0dG9uW3R5cGU9J3N1Ym1pdCddXCIsXG4gICAgICBjaGVja1JlYWRpbmVzczogYXN5bmMgKCkgPT4gbmF2aWdhdGVUb0xvZ2luKHRoaXMucGFnZSksXG4gICAgICBwb3N0QWN0aW9uOiBhc3luYyAoKSA9PiB3YWl0Rm9yUG9zdExvZ2luKHRoaXMucGFnZSksXG4gICAgICBwb3NzaWJsZVJlc3VsdHM6IGdldFBvc3NpYmxlTG9naW5SZXN1bHRzKCksXG4gICAgfTtcbiAgfVxuXG4gIGFzeW5jIGZldGNoRGF0YSgpOiBQcm9taXNlPFNjcmFwZXJTY3JhcGluZ1Jlc3VsdD4ge1xuICAgIGNvbnN0IG1pbmltdW1TdGFydE1vbWVudCA9IG1vbWVudCgpLnN1YnRyYWN0KDMsICd5ZWFycycpLmFkZCgxLCAnZGF5Jyk7XG4gICAgY29uc3QgZGVmYXVsdFN0YXJ0TW9tZW50ID0gbW9tZW50KCkuc3VidHJhY3QoMSwgJ3llYXJzJykuYWRkKDEsICdkYXknKTtcbiAgICBjb25zdCBzdGFydERhdGUgPSB0aGlzLm9wdGlvbnMuc3RhcnREYXRlIHx8IGRlZmF1bHRTdGFydE1vbWVudC50b0RhdGUoKTtcbiAgICBjb25zdCBzdGFydE1vbWVudCA9IG1vbWVudC5tYXgobWluaW11bVN0YXJ0TW9tZW50LCBtb21lbnQoc3RhcnREYXRlKSk7XG5cbiAgICBhd2FpdCB0aGlzLm5hdmlnYXRlVG8oVFJBTlNBQ1RJT05TX1VSTCk7XG5cbiAgICBjb25zdCBhY2NvdW50cyA9IGF3YWl0IGZldGNoVHJhbnNhY3Rpb25zKHRoaXMucGFnZSwgc3RhcnRNb21lbnQpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBhY2NvdW50cyxcbiAgICB9O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IExldW1pU2NyYXBlcjtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLElBQUFBLE9BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQUFDLFVBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLE1BQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLHFCQUFBLEdBQUFILE9BQUE7QUFPQSxJQUFBSSxXQUFBLEdBQUFKLE9BQUE7QUFDQSxJQUFBSyxhQUFBLEdBQUFMLE9BQUE7QUFLQSxJQUFBTSx1QkFBQSxHQUFBTixPQUFBO0FBQXNHLFNBQUFELHVCQUFBUSxDQUFBLFdBQUFBLENBQUEsSUFBQUEsQ0FBQSxDQUFBQyxVQUFBLEdBQUFELENBQUEsS0FBQUUsT0FBQSxFQUFBRixDQUFBO0FBR3RHLE1BQU1HLEtBQUssR0FBRyxJQUFBQyxlQUFRLEVBQUMsT0FBTyxDQUFDO0FBQy9CLE1BQU1DLFFBQVEsR0FBRyw2QkFBNkI7QUFDOUMsTUFB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