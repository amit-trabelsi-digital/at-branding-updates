"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
var _moment = _interopRequireDefault(require("moment"));
var _uuid = require("uuid");
var _debug = require("../helpers/debug");
var _fetch = require("../helpers/fetch");
var _navigation = require("../helpers/navigation");
var _waiting = require("../helpers/waiting");
var _transactions = require("../transactions");
var _baseScraperWithBrowser = require("./base-scraper-with-browser");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
const debug = (0, _debug.getDebug)('hapoalim');
const DATE_FORMAT = 'YYYYMMDD';

// eslint-disable-next-line @typescript-eslint/no-namespace

function convertTransactions(txns) {
  return txns.map(txn => {
    const isOutbound = txn.eventActivityTypeCode === 2;
    let memo = '';
    if (txn.beneficiaryDetailsData) {
      const {
        partyHeadline,
        partyName,
        messageHeadline,
        messageDetail
      } = txn.beneficiaryDetailsData;
      const memoLines = [];
      if (partyHeadline) {
        memoLines.push(partyHeadline);
      }
      if (partyName) {
        memoLines.push(`${partyName}.`);
      }
      if (messageHeadline) {
        memoLines.push(messageHeadline);
      }
      if (messageDetail) {
        memoLines.push(`${messageDetail}.`);
      }
      if (memoLines.length) {
        memo = memoLines.join(' ');
      }
    }
    const result = {
      type: _transactions.TransactionTypes.Normal,
      identifier: txn.referenceNumber,
      date: (0, _moment.default)(txn.eventDate, DATE_FORMAT).toISOString(),
      processedDate: (0, _moment.default)(txn.valueDate, DATE_FORMAT).toISOString(),
      originalAmount: isOutbound ? -txn.eventAmount : txn.eventAmount,
      originalCurrency: 'ILS',
      chargedAmount: isOutbound ? -txn.eventAmount : txn.eventAmount,
      description: txn.activityDescription || '',
      status: txn.serialNumber === 0 ? _transactions.TransactionStatuses.Pending : _transactions.TransactionStatuses.Completed,
      memo
    };
    return result;
  });
}
async function getRestContext(page) {
  await (0, _waiting.waitUntil)(() => {
    return page.evaluate(() => !!window.bnhpApp);
  }, 'waiting for app data load');
  const result = await page.evaluate(() => {
    return window.bnhpApp.restContext;
  });
  return result.slice(1);
}
async function fetchPoalimXSRFWithinPage(page, url, pageUuid) {
  const cookies = await page.cookies();
  const XSRFCookie = cookies.find(cookie => cookie.name === 'XSRF-TOKEN');
  const headers = {};
  if (XSRFCookie != null) {
    headers['X-XSRF-TOKEN'] = XSRFCookie.value;
  }
  headers.pageUuid = pageUuid;
  headers.uuid = (0, _uuid.v4)();
  headers['Content-Type'] = 'application/json;charset=UTF-8';
  return (0, _fetch.fetchPostWithinPage)(page, url, [], headers);
}
async function getExtraScrap(txnsResult, baseUrl, page, accountNumber) {
  const promises = txnsResult.transactions.map(async transaction => {
    const {
      pfmDetails,
      serialNumber
    } = transaction;
    if (serialNumber !== 0) {
      const url = `${baseUrl}${pfmDetails}&accountId=${accountNumber}&lang=he`;
      const extraTransactionDetails = (await (0, _fetch.fetchGetWithinPage)(page, url)) || [];
      if (extraTransactionDetails && extraTransactionDetails.length) {
        const {
          transactionNumber
        } = extraTransactionDetails[0];
        if (transactionNumber) {
          return _objectSpread(_objectSpread({}, transaction), {}, {
            referenceNumber: transactionNumber
          });
        }
      }
    }
    return transaction;
  });
  const res = await Promise.all(promises);
  return {
    transactions: res
  };
}
async function getAccountTransactions(baseUrl, apiSiteUrl, page, accountNumber, startDate, endDate, additionalTransactionInformation = false) {
  var _finalResult$transact;
  const txnsUrl = `${apiSiteUrl}/current-account/transactions?accountId=${accountNumber}&numItemsPerPage=1000&retrievalEndDate=${endDate}&retrievalStartDate=${startDate}&sortCode=1`;
  const txnsResult = await fetchPoalimXSRFWithinPage(page, txnsUrl, '/current-account/transactions');
  const finalResult = additionalTransactionInformation && txnsResult !== null && txnsResult !== void 0 && txnsResult.transactions.length ? await getExtraScrap(txnsResult, baseUrl, page, accountNumber) : txnsResult;
  return convertTransactions((_finalResult$transact = finalResult === null || finalResult === void 0 ? void 0 : finalResult.transactions) !== null && _finalResult$transact !== void 0 ? _finalResult$transact : []);
}
async function getAccountBalance(apiSiteUrl, page, accountNumber) {
  const balanceAndCreditLimitUrl = `${apiSiteUrl}/current-account/composite/balanceAndCreditLimit?accountId=${accountNumber}&view=details&lang=he`;
  const balanceAndCreditLimit = await (0, _fetch.fetchGetWithinPage)(page, balanceAndCreditLimitUrl);
  return balanceAndCreditLimit === null || balanceAndCreditLimit === void 0 ? void 0 : balanceAndCreditLimit.currentBalance;
}
async function fetchAccountData(page, baseUrl, options) {
  const restContext = await getRestContext(page);
  const apiSiteUrl = `${baseUrl}/${restContext}`;
  const accountDataUrl = `${baseUrl}/ServerServices/general/accounts`;
  debug('fetching accounts data');
  const accountsInfo = (await (0, _fetch.fetchGetWithinPage)(page, accountDataUrl)) || [];
  debug('got %d accounts, fetching txns and balance', accountsInfo.length);
  const defaultStartMoment = (0, _moment.default)().subtract(1, 'years').add(1, 'day');
  const startDate = options.startDate || defaultStartMoment.toDate();
  const startMoment = _moment.default.max(defaultStartMoment, (0, _moment.default)(startDate));
  const {
    additionalTransactionInformation
  } = options;
  const startDateStr = startMoment.format(DATE_FORMAT);
  const endDateStr = (0, _moment.default)().format(DATE_FORMAT);
  const accounts = [];
  for (const account of accountsInfo) {
    let balance;
    const accountNumber = `${account.bankNumber}-${account.branchNumber}-${account.accountNumber}`;
    const isActiveAccount = account.accountClosingReasonCode === 0;
    if (isActiveAccount) {
      balance = await getAccountBalance(apiSiteUrl, page, accountNumber);
    } else {
      debug('Skipping balance for a closed account, balance will be undefined');
    }
    const txns = await getAccountTransactions(baseUrl, apiSiteUrl, page, accountNumber, startDateStr, endDateStr, additionalTransactionInformation);
    accounts.push({
      accountNumber,
      balance,
      txns
    });
  }
  const accountData = {
    success: true,
    accounts
  };
  debug('fetching ended');
  return accountData;
}
function getPossibleLoginResults(baseUrl) {
  const urls = {};
  urls[_baseScraperWithBrowser.LoginResults.Success] = [`${baseUrl}/portalserver/HomePage`, `${baseUrl}/ng-portals-bt/rb/he/homepage`, `${baseUrl}/ng-portals/rb/he/homepage`];
  urls[_baseScraperWithBrowser.LoginResults.InvalidPassword] = [`${baseUrl}/AUTHENTICATE/LOGON?flow=AUTHENTICATE&state=LOGON&errorcode=1.6&callme=false`];
  urls[_baseScraperWithBrowser.LoginResults.ChangePassword] = [`${baseUrl}/MCP/START?flow=MCP&state=START&expiredDate=null`, /\/ABOUTTOEXPIRE\/START/i];
  return urls;
}
function createLoginFields(credentials) {
  return [{
    selector: '#userCode',
    value: credentials.userCode
  }, {
    selector: '#password',
    value: credentials.password
  }];
}
class HapoalimScraper extends _baseScraperWithBrowser.BaseScraperWithBrowser {
  // eslint-disable-next-line class-methods-use-this
  get baseUrl() {
    return 'https://login.bankhapoalim.co.il';
  }
  getLoginOptions(credentials) {
    return {
      loginUrl: `${this.baseUrl}/cgi-bin/poalwwwc?reqName=getLogonPage`,
      fields: createLoginFields(credentials),
      submitButtonSelector: '.login-btn',
      postAction: async () => (0, _navigation.waitForRedirect)(this.page),
      possibleResults: getPossibleLoginResults(this.baseUrl)
    };
  }
  async fetchData() {
    return fetchAccountData(this.page, this.baseUrl, this.options);
  }
}
var _default = exports.default = HapoalimScraper;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,